
F767ZI_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080053a8  080053a8  000153a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053cc  080053cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053d4  080053d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  2000000c  080053e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  080053e8  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016639  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003126  00000000  00000000  00036673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000397a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  0003a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba9b  00000000  00000000  0003b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013689  00000000  00000000  00066b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f832d  00000000  00000000  0007a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172529  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003438  00000000  00000000  0017257c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005390 	.word	0x08005390

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005390 	.word	0x08005390

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_CRC_Init+0x54>)
 8000536:	4a14      	ldr	r2, [pc, #80]	; (8000588 <MX_CRC_Init+0x58>)
 8000538:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <MX_CRC_Init+0x54>)
 800053c:	2201      	movs	r2, #1
 800053e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <MX_CRC_Init+0x54>)
 8000542:	2201      	movs	r2, #1
 8000544:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_CRC_Init+0x54>)
 8000548:	f248 0205 	movw	r2, #32773	; 0x8005
 800054c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <MX_CRC_Init+0x54>)
 8000550:	2208      	movs	r2, #8
 8000552:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_CRC_Init+0x54>)
 8000556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800055a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_CRC_Init+0x54>)
 800055e:	2220      	movs	r2, #32
 8000560:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_CRC_Init+0x54>)
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_CRC_Init+0x54>)
 800056a:	2201      	movs	r2, #1
 800056c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_CRC_Init+0x54>)
 8000570:	f000 fe8c 	bl	800128c <HAL_CRC_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 800057a:	f000 fa91 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000058 	.word	0x20000058
 8000588:	40023000 	.word	0x40023000

0800058c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <HAL_CRC_MspInit+0x38>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d10b      	bne.n	80005b6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_CRC_MspInit+0x3c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <HAL_CRC_MspInit+0x3c>)
 80005a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <HAL_CRC_MspInit+0x3c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40023000 	.word	0x40023000
 80005c8:	40023800 	.word	0x40023800

080005cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <MX_DMA_Init+0x48>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <MX_DMA_Init+0x48>)
 80005d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_DMA_Init+0x48>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	200c      	movs	r0, #12
 80005f0:	f000 fe15 	bl	800121e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005f4:	200c      	movs	r0, #12
 80005f6:	f000 fe2e 	bl	8001256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	200e      	movs	r0, #14
 8000600:	f000 fe0d 	bl	800121e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000604:	200e      	movs	r0, #14
 8000606:	f000 fe26 	bl	8001256 <HAL_NVIC_EnableIRQ>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	; 0x30
 800061c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	4b68      	ldr	r3, [pc, #416]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a67      	ldr	r2, [pc, #412]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b65      	ldr	r3, [pc, #404]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	4b62      	ldr	r3, [pc, #392]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a61      	ldr	r2, [pc, #388]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b5f      	ldr	r3, [pc, #380]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b5c      	ldr	r3, [pc, #368]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a5b      	ldr	r2, [pc, #364]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b59      	ldr	r3, [pc, #356]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b56      	ldr	r3, [pc, #344]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a55      	ldr	r2, [pc, #340]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b53      	ldr	r3, [pc, #332]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a4f      	ldr	r2, [pc, #316]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a6:	4b4a      	ldr	r3, [pc, #296]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a49      	ldr	r2, [pc, #292]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 80006ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b47      	ldr	r3, [pc, #284]	; (80007d0 <MX_GPIO_Init+0x1b8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80006c4:	4843      	ldr	r0, [pc, #268]	; (80007d4 <MX_GPIO_Init+0x1bc>)
 80006c6:	f001 fd95 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	4842      	ldr	r0, [pc, #264]	; (80007d8 <MX_GPIO_Init+0x1c0>)
 80006d0:	f001 fd90 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	483c      	ldr	r0, [pc, #240]	; (80007dc <MX_GPIO_Init+0x1c4>)
 80006ec:	f001 fbd6 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006f0:	2332      	movs	r3, #50	; 0x32
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000700:	230b      	movs	r3, #11
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4834      	ldr	r0, [pc, #208]	; (80007dc <MX_GPIO_Init+0x1c4>)
 800070c:	f001 fbc6 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000710:	2386      	movs	r3, #134	; 0x86
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	482d      	ldr	r0, [pc, #180]	; (80007e0 <MX_GPIO_Init+0x1c8>)
 800072c:	f001 fbb6 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000730:	f244 0381 	movw	r3, #16513	; 0x4081
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4822      	ldr	r0, [pc, #136]	; (80007d4 <MX_GPIO_Init+0x1bc>)
 800074a:	f001 fba7 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800074e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000760:	230b      	movs	r3, #11
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	481a      	ldr	r0, [pc, #104]	; (80007d4 <MX_GPIO_Init+0x1bc>)
 800076c:	f001 fb96 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000770:	2340      	movs	r3, #64	; 0x40
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	4814      	ldr	r0, [pc, #80]	; (80007d8 <MX_GPIO_Init+0x1c0>)
 8000788:	f001 fb88 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_GPIO_Init+0x1c0>)
 80007a0:	f001 fb7c 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b6:	230b      	movs	r3, #11
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_GPIO_Init+0x1c0>)
 80007c2:	f001 fb6b 	bl	8001e9c <HAL_GPIO_Init>

}
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	; 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400
 80007d8:	40021800 	.word	0x40021800
 80007dc:	40020800 	.word	0x40020800
 80007e0:	40020000 	.word	0x40020000

080007e4 <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = {0};
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = {0};
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a4b      	ldr	r2, [pc, #300]	; (8000920 <HAL_UARTEx_RxEventCallback+0x13c>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	f040 808f 	bne.w	8000918 <HAL_UARTEx_RxEventCallback+0x134>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);
 80007fa:	4a4a      	ldr	r2, [pc, #296]	; (8000924 <HAL_UARTEx_RxEventCallback+0x140>)
 80007fc:	4b4a      	ldr	r3, [pc, #296]	; (8000928 <HAL_UARTEx_RxEventCallback+0x144>)
 80007fe:	4614      	mov	r4, r2
 8000800:	461d      	mov	r5, r3
 8000802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000806:	682b      	ldr	r3, [r5, #0]
 8000808:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);
 800080a:	2214      	movs	r2, #20
 800080c:	2100      	movs	r1, #0
 800080e:	4846      	ldr	r0, [pc, #280]	; (8000928 <HAL_UARTEx_RxEventCallback+0x144>)
 8000810:	f004 fdb6 	bl	8005380 <memset>
		if(Size - 2 > 0 && Size <= Rx_BUFFER_SIZE){
 8000814:	887b      	ldrh	r3, [r7, #2]
 8000816:	2b02      	cmp	r3, #2
 8000818:	d95f      	bls.n	80008da <HAL_UARTEx_RxEventCallback+0xf6>
 800081a:	887b      	ldrh	r3, [r7, #2]
 800081c:	2b14      	cmp	r3, #20
 800081e:	d85c      	bhi.n	80008da <HAL_UARTEx_RxEventCallback+0xf6>
			cmdDataSize = Size - 2;
 8000820:	887b      	ldrh	r3, [r7, #2]
 8000822:	3b02      	subs	r3, #2
 8000824:	b29a      	uxth	r2, r3
 8000826:	4b41      	ldr	r3, [pc, #260]	; (800092c <HAL_UARTEx_RxEventCallback+0x148>)
 8000828:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)Old_Rx_Buffer, cmdDataSize);
 800082a:	4b40      	ldr	r3, [pc, #256]	; (800092c <HAL_UARTEx_RxEventCallback+0x148>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	b29b      	uxth	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	493c      	ldr	r1, [pc, #240]	; (8000924 <HAL_UARTEx_RxEventCallback+0x140>)
 8000834:	483e      	ldr	r0, [pc, #248]	; (8000930 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000836:	f000 fd8d 	bl	8001354 <HAL_CRC_Calculate>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	4b3d      	ldr	r3, [pc, #244]	; (8000934 <HAL_UARTEx_RxEventCallback+0x150>)
 8000840:	801a      	strh	r2, [r3, #0]
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8 | Old_Rx_Buffer[cmdDataSize+1];
 8000842:	4b3a      	ldr	r3, [pc, #232]	; (800092c <HAL_UARTEx_RxEventCallback+0x148>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	b29b      	uxth	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	4b36      	ldr	r3, [pc, #216]	; (8000924 <HAL_UARTEx_RxEventCallback+0x140>)
 800084c:	5c9b      	ldrb	r3, [r3, r2]
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	b21a      	sxth	r2, r3
 8000852:	4b36      	ldr	r3, [pc, #216]	; (800092c <HAL_UARTEx_RxEventCallback+0x148>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	b29b      	uxth	r3, r3
 8000858:	3301      	adds	r3, #1
 800085a:	4932      	ldr	r1, [pc, #200]	; (8000924 <HAL_UARTEx_RxEventCallback+0x140>)
 800085c:	5ccb      	ldrb	r3, [r1, r3]
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	b21b      	sxth	r3, r3
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b34      	ldr	r3, [pc, #208]	; (8000938 <HAL_UARTEx_RxEventCallback+0x154>)
 8000868:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){
 800086a:	4b32      	ldr	r3, [pc, #200]	; (8000934 <HAL_UARTEx_RxEventCallback+0x150>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <HAL_UARTEx_RxEventCallback+0x154>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	b29b      	uxth	r3, r3
 8000876:	429a      	cmp	r2, r3
 8000878:	bf0c      	ite	eq
 800087a:	2301      	moveq	r3, #1
 800087c:	2300      	movne	r3, #0
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d01e      	beq.n	80008c2 <HAL_UARTEx_RxEventCallback+0xde>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	482c      	ldr	r0, [pc, #176]	; (800093c <HAL_UARTEx_RxEventCallback+0x158>)
 800088a:	f001 fcb3 	bl	80021f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000894:	4829      	ldr	r0, [pc, #164]	; (800093c <HAL_UARTEx_RxEventCallback+0x158>)
 8000896:	f001 fcad 	bl	80021f4 <HAL_GPIO_WritePin>
				if(Old_Rx_Buffer[0] == 0x41){	// Joint Jog
 800089a:	4b22      	ldr	r3, [pc, #136]	; (8000924 <HAL_UARTEx_RxEventCallback+0x140>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b41      	cmp	r3, #65	; 0x41
 80008a0:	d105      	bne.n	80008ae <HAL_UARTEx_RxEventCallback+0xca>
					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	491f      	ldr	r1, [pc, #124]	; (8000924 <HAL_UARTEx_RxEventCallback+0x140>)
 80008a6:	481e      	ldr	r0, [pc, #120]	; (8000920 <HAL_UARTEx_RxEventCallback+0x13c>)
 80008a8:	f002 ff8c 	bl	80037c4 <HAL_UART_Transmit_DMA>
			if(CRCValue == ExpectedCRCValue){
 80008ac:	e026      	b.n	80008fc <HAL_UARTEx_RxEventCallback+0x118>
				}
				else if(Old_Rx_Buffer[0] == 0x42){ 	// Linear Jog
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <HAL_UARTEx_RxEventCallback+0x140>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b42      	cmp	r3, #66	; 0x42
 80008b4:	d122      	bne.n	80008fc <HAL_UARTEx_RxEventCallback+0x118>
					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
 80008b6:	2201      	movs	r2, #1
 80008b8:	491a      	ldr	r1, [pc, #104]	; (8000924 <HAL_UARTEx_RxEventCallback+0x140>)
 80008ba:	4819      	ldr	r0, [pc, #100]	; (8000920 <HAL_UARTEx_RxEventCallback+0x13c>)
 80008bc:	f002 ff82 	bl	80037c4 <HAL_UART_Transmit_DMA>
			if(CRCValue == ExpectedCRCValue){
 80008c0:	e01c      	b.n	80008fc <HAL_UARTEx_RxEventCallback+0x118>
				}

			}
			else{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	481d      	ldr	r0, [pc, #116]	; (800093c <HAL_UARTEx_RxEventCallback+0x158>)
 80008c8:	f001 fc94 	bl	80021f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d2:	481a      	ldr	r0, [pc, #104]	; (800093c <HAL_UARTEx_RxEventCallback+0x158>)
 80008d4:	f001 fc8e 	bl	80021f4 <HAL_GPIO_WritePin>
			if(CRCValue == ExpectedCRCValue){
 80008d8:	e010      	b.n	80008fc <HAL_UARTEx_RxEventCallback+0x118>
			}
		}
		else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	4817      	ldr	r0, [pc, #92]	; (800093c <HAL_UARTEx_RxEventCallback+0x158>)
 80008e0:	f001 fc88 	bl	80021f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ea:	4814      	ldr	r0, [pc, #80]	; (800093c <HAL_UARTEx_RxEventCallback+0x158>)
 80008ec:	f001 fc82 	bl	80021f4 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)"A\n", 2);
 80008f0:	2202      	movs	r2, #2
 80008f2:	4913      	ldr	r1, [pc, #76]	; (8000940 <HAL_UARTEx_RxEventCallback+0x15c>)
 80008f4:	480a      	ldr	r0, [pc, #40]	; (8000920 <HAL_UARTEx_RxEventCallback+0x13c>)
 80008f6:	f002 ff65 	bl	80037c4 <HAL_UART_Transmit_DMA>
 80008fa:	e000      	b.n	80008fe <HAL_UARTEx_RxEventCallback+0x11a>
			if(CRCValue == ExpectedCRCValue){
 80008fc:	bf00      	nop
		}
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 80008fe:	2214      	movs	r2, #20
 8000900:	4909      	ldr	r1, [pc, #36]	; (8000928 <HAL_UARTEx_RxEventCallback+0x144>)
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000904:	f004 f9ce 	bl	8004ca4 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_UARTEx_RxEventCallback+0x160>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <HAL_UARTEx_RxEventCallback+0x160>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f022 0208 	bic.w	r2, r2, #8
 8000916:	601a      	str	r2, [r3, #0]
	}
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bdb0      	pop	{r4, r5, r7, pc}
 8000920:	200000dc 	.word	0x200000dc
 8000924:	2000002c 	.word	0x2000002c
 8000928:	20000040 	.word	0x20000040
 800092c:	20000054 	.word	0x20000054
 8000930:	20000058 	.word	0x20000058
 8000934:	20000028 	.word	0x20000028
 8000938:	2000002a 	.word	0x2000002a
 800093c:	40020400 	.word	0x40020400
 8000940:	080053a8 	.word	0x080053a8
 8000944:	2000007c 	.word	0x2000007c

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094c:	f000 fb0b 	bl	8000f66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000950:	f000 f826 	bl	80009a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000954:	f7ff fe60 	bl	8000618 <MX_GPIO_Init>
  MX_DMA_Init();
 8000958:	f7ff fe38 	bl	80005cc <MX_DMA_Init>
  MX_USART3_UART_Init();
 800095c:	f000 f936 	bl	8000bcc <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000960:	f7ff fde6 	bl	8000530 <MX_CRC_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000964:	f000 fa2e 	bl	8000dc4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2101      	movs	r1, #1
 800096c:	4808      	ldr	r0, [pc, #32]	; (8000990 <main+0x48>)
 800096e:	f001 fc41 	bl	80021f4 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8000972:	2214      	movs	r2, #20
 8000974:	4907      	ldr	r1, [pc, #28]	; (8000994 <main+0x4c>)
 8000976:	4808      	ldr	r0, [pc, #32]	; (8000998 <main+0x50>)
 8000978:	f004 f994 	bl	8004ca4 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <main+0x54>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <main+0x54>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f022 0208 	bic.w	r2, r2, #8
 800098a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800098c:	e7fe      	b.n	800098c <main+0x44>
 800098e:	bf00      	nop
 8000990:	40020400 	.word	0x40020400
 8000994:	20000040 	.word	0x20000040
 8000998:	200000dc 	.word	0x200000dc
 800099c:	2000007c 	.word	0x2000007c

080009a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b094      	sub	sp, #80	; 0x50
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2234      	movs	r2, #52	; 0x34
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 fce6 	bl	8005380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009c4:	f001 fd78 	bl	80024b8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <_Z18SystemClock_Configv+0xf8>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	4a32      	ldr	r2, [pc, #200]	; (8000a98 <_Z18SystemClock_Configv+0xf8>)
 80009ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <_Z18SystemClock_Configv+0xf8>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e0:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <_Z18SystemClock_Configv+0xfc>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <_Z18SystemClock_Configv+0xfc>)
 80009e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <_Z18SystemClock_Configv+0xfc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a02:	2302      	movs	r3, #2
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a10:	23d8      	movs	r3, #216	; 0xd8
 8000a12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a18:	2309      	movs	r3, #9
 8000a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fda7 	bl	8002578 <HAL_RCC_OscConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	bf14      	ite	ne
 8000a30:	2301      	movne	r3, #1
 8000a32:	2300      	moveq	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000a3a:	f000 f831 	bl	8000aa0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a3e:	f001 fd4b 	bl	80024d8 <HAL_PWREx_EnableOverDrive>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf14      	ite	ne
 8000a48:	2301      	movne	r3, #1
 8000a4a:	2300      	moveq	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8000a52:	f000 f825 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	2107      	movs	r1, #7
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 f82d 	bl	8002ad4 <HAL_RCC_ClockConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	bf14      	ite	ne
 8000a80:	2301      	movne	r3, #1
 8000a82:	2300      	moveq	r3, #0
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 8000a8a:	f000 f809 	bl	8000aa0 <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	; 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <Error_Handler+0x2c>)
 8000aaa:	f001 fba3 	bl	80021f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <Error_Handler+0x2c>)
 8000ab4:	f001 fb9e 	bl	80021f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <Error_Handler+0x2c>)
 8000ac0:	f001 fb98 	bl	80021f4 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x28>
 8000aca:	bf00      	nop
 8000acc:	40020400 	.word	0x40020400

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x44>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_MspInit+0x44>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_MspInit+0x44>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_MspInit+0x44>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_MspInit+0x44>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_MspInit+0x44>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 fa3c 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <DMA1_Stream1_IRQHandler+0x10>)
 8000b72:	f000 ff29 	bl	80019c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000007c 	.word	0x2000007c

08000b80 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <DMA1_Stream3_IRQHandler+0x10>)
 8000b86:	f000 ff1f 	bl	80019c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000160 	.word	0x20000160

08000b94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <USART3_IRQHandler+0x10>)
 8000b9a:	f002 fea3 	bl	80038e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200000dc 	.word	0x200000dc

08000ba8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000bd2:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <MX_USART3_UART_Init+0x5c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART3_UART_Init+0x58>)
 8000c10:	f002 fd8a 	bl	8003728 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c1a:	f7ff ff41 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000dc 	.word	0x200000dc
 8000c28:	40004800 	.word	0x40004800

08000c2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0ae      	sub	sp, #184	; 0xb8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2290      	movs	r2, #144	; 0x90
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 fb97 	bl	8005380 <memset>
  if(uartHandle->Instance==USART3)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a54      	ldr	r2, [pc, #336]	; (8000da8 <HAL_UART_MspInit+0x17c>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	f040 80a1 	bne.w	8000da0 <HAL_UART_MspInit+0x174>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c62:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 f933 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000c78:	f7ff ff12 	bl	8000aa0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c7c:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a4a      	ldr	r2, [pc, #296]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b48      	ldr	r3, [pc, #288]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c94:	4b45      	ldr	r3, [pc, #276]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	4a44      	ldr	r2, [pc, #272]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000c9a:	f043 0308 	orr.w	r3, r3, #8
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca0:	4b42      	ldr	r3, [pc, #264]	; (8000dac <HAL_UART_MspInit+0x180>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f003 0308 	and.w	r3, r3, #8
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ccc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4837      	ldr	r0, [pc, #220]	; (8000db0 <HAL_UART_MspInit+0x184>)
 8000cd4:	f001 f8e2 	bl	8001e9c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000cd8:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000cda:	4a37      	ldr	r2, [pc, #220]	; (8000db8 <HAL_UART_MspInit+0x18c>)
 8000cdc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000cde:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000ce0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ce4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce6:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cec:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf2:	4b30      	ldr	r3, [pc, #192]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d00:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000d06:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d0c:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d12:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d18:	4826      	ldr	r0, [pc, #152]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000d1a:	f000 fcb5 	bl	8001688 <HAL_DMA_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8000d24:	f7ff febc 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000d2c:	671a      	str	r2, [r3, #112]	; 0x70
 8000d2e:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <HAL_UART_MspInit+0x188>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d36:	4a22      	ldr	r2, [pc, #136]	; (8000dc0 <HAL_UART_MspInit+0x194>)
 8000d38:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d40:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d54:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000d74:	4811      	ldr	r0, [pc, #68]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d76:	f000 fc87 	bl	8001688 <HAL_DMA_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8000d80:	f7ff fe8e 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d88:	66da      	str	r2, [r3, #108]	; 0x6c
 8000d8a:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <HAL_UART_MspInit+0x190>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	2027      	movs	r0, #39	; 0x27
 8000d96:	f000 fa42 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d9a:	2027      	movs	r0, #39	; 0x27
 8000d9c:	f000 fa5b 	bl	8001256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000da0:	bf00      	nop
 8000da2:	37b8      	adds	r7, #184	; 0xb8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40004800 	.word	0x40004800
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020c00 	.word	0x40020c00
 8000db4:	2000007c 	.word	0x2000007c
 8000db8:	40026028 	.word	0x40026028
 8000dbc:	20000160 	.word	0x20000160
 8000dc0:	40026058 	.word	0x40026058

08000dc4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd2:	2206      	movs	r2, #6
 8000dd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd8:	2202      	movs	r2, #2
 8000dda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de4:	2202      	movs	r2, #2
 8000de6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e08:	f001 fa0d 	bl	8002226 <HAL_PCD_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e12:	f7ff fe45 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200001c0 	.word	0x200001c0

08000e20 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0ae      	sub	sp, #184	; 0xb8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2290      	movs	r2, #144	; 0x90
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f004 fa9d 	bl	8005380 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e4e:	d159      	bne.n	8000f04 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 f839 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e6c:	f7ff fe18 	bl	8000aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <HAL_PCD_MspInit+0xec>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a25      	ldr	r2, [pc, #148]	; (8000f0c <HAL_PCD_MspInit+0xec>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <HAL_PCD_MspInit+0xec>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e88:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ea2:	230a      	movs	r3, #10
 8000ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4818      	ldr	r0, [pc, #96]	; (8000f10 <HAL_PCD_MspInit+0xf0>)
 8000eb0:	f000 fff4 	bl	8001e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <HAL_PCD_MspInit+0xf0>)
 8000ed0:	f000 ffe4 	bl	8001e9c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_PCD_MspInit+0xec>)
 8000ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_PCD_MspInit+0xec>)
 8000eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ede:	6353      	str	r3, [r2, #52]	; 0x34
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_PCD_MspInit+0xec>)
 8000ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <HAL_PCD_MspInit+0xec>)
 8000eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_PCD_MspInit+0xec>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_PCD_MspInit+0xec>)
 8000efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000f04:	bf00      	nop
 8000f06:	37b8      	adds	r7, #184	; 0xb8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020000 	.word	0x40020000

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1a:	490e      	ldr	r1, [pc, #56]	; (8000f54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f30:	4c0b      	ldr	r4, [pc, #44]	; (8000f60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3e:	f7ff fe33 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f004 f9f9 	bl	8005338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fcff 	bl	8000948 <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f58:	080053dc 	.word	0x080053dc
  ldr r2, =_sbss
 8000f5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f60:	200005c8 	.word	0x200005c8

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>

08000f66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f94c 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 f805 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f76:	f7ff fdab 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f967 	bl	8001272 <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f92f 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	200005c4 	.word	0x200005c4

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200005c4 	.word	0x200005c4

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <__NVIC_SetPriorityGrouping+0x40>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	4313      	orrs	r3, r2
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	05fa0000 	.word	0x05fa0000

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff29 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff3e 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff31 	bl	80010cc <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa2 	bl	80011c4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e054      	b.n	8001348 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7f5b      	ldrb	r3, [r3, #29]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff f96c 	bl	800058c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2202      	movs	r2, #2
 80012b8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	791b      	ldrb	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10c      	bne.n	80012dc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a22      	ldr	r2, [pc, #136]	; (8001350 <HAL_CRC_Init+0xc4>)
 80012c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0218 	bic.w	r2, r2, #24
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	e00c      	b.n	80012f6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6899      	ldr	r1, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	461a      	mov	r2, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f948 	bl	800157c <HAL_CRCEx_Polynomial_Set>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e028      	b.n	8001348 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	795b      	ldrb	r3, [r3, #5]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d105      	bne.n	800130a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f04f 32ff 	mov.w	r2, #4294967295
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	e004      	b.n	8001314 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6912      	ldr	r2, [r2, #16]
 8001312:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699a      	ldr	r2, [r3, #24]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	04c11db7 	.word	0x04c11db7

08001354 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2202      	movs	r2, #2
 8001368:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d006      	beq.n	8001390 <HAL_CRC_Calculate+0x3c>
 8001382:	2b03      	cmp	r3, #3
 8001384:	d829      	bhi.n	80013da <HAL_CRC_Calculate+0x86>
 8001386:	2b01      	cmp	r3, #1
 8001388:	d019      	beq.n	80013be <HAL_CRC_Calculate+0x6a>
 800138a:	2b02      	cmp	r3, #2
 800138c:	d01e      	beq.n	80013cc <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800138e:	e024      	b.n	80013da <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e00a      	b.n	80013ac <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	441a      	add	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3301      	adds	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d3f0      	bcc.n	8001396 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	613b      	str	r3, [r7, #16]
      break;
 80013bc:	e00e      	b.n	80013dc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 f812 	bl	80013ec <CRC_Handle_8>
 80013c8:	6138      	str	r0, [r7, #16]
      break;
 80013ca:	e007      	b.n	80013dc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f000 f899 	bl	8001508 <CRC_Handle_16>
 80013d6:	6138      	str	r0, [r7, #16]
      break;
 80013d8:	e000      	b.n	80013dc <HAL_CRC_Calculate+0x88>
      break;
 80013da:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2201      	movs	r2, #1
 80013e0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80013e2:	693b      	ldr	r3, [r7, #16]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	e023      	b.n	8001446 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	3301      	adds	r3, #1
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	440b      	add	r3, r1
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001418:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	440b      	add	r3, r1
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001428:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	3303      	adds	r3, #3
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	440b      	add	r3, r1
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800143c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800143e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	3301      	adds	r3, #1
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	429a      	cmp	r2, r3
 800144e:	d3d6      	bcc.n	80013fe <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d04d      	beq.n	80014f6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d107      	bne.n	8001474 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	4413      	add	r3, r2
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d116      	bne.n	80014ac <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	4413      	add	r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	b21a      	sxth	r2, r3
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	3301      	adds	r3, #1
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	440b      	add	r3, r1
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b21b      	sxth	r3, r3
 800149a:	4313      	orrs	r3, r2
 800149c:	b21b      	sxth	r3, r3
 800149e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	8b7a      	ldrh	r2, [r7, #26]
 80014aa:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d11f      	bne.n	80014f6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	3301      	adds	r3, #1
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	440b      	add	r3, r1
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	8b7a      	ldrh	r2, [r7, #26]
 80014e2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	3302      	adds	r3, #2
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	4413      	add	r3, r2
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3724      	adds	r7, #36	; 0x24
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e013      	b.n	8001542 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	4413      	add	r3, r2
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	440b      	add	r3, r1
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	4619      	mov	r1, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3301      	adds	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	085b      	lsrs	r3, r3, #1
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3e6      	bcc.n	800151a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	4413      	add	r3, r2
 8001564:	881a      	ldrh	r2, [r3, #0]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800158c:	231f      	movs	r3, #31
 800158e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001590:	bf00      	nop
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1e5a      	subs	r2, r3, #1
 8001596:	613a      	str	r2, [r7, #16]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d009      	beq.n	80015b0 <HAL_CRCEx_Polynomial_Set+0x34>
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f003 031f 	and.w	r3, r3, #31
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_CRCEx_Polynomial_Set+0x16>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b18      	cmp	r3, #24
 80015b4:	d846      	bhi.n	8001644 <HAL_CRCEx_Polynomial_Set+0xc8>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <HAL_CRCEx_Polynomial_Set+0x40>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	0800164b 	.word	0x0800164b
 80015c0:	08001645 	.word	0x08001645
 80015c4:	08001645 	.word	0x08001645
 80015c8:	08001645 	.word	0x08001645
 80015cc:	08001645 	.word	0x08001645
 80015d0:	08001645 	.word	0x08001645
 80015d4:	08001645 	.word	0x08001645
 80015d8:	08001645 	.word	0x08001645
 80015dc:	08001639 	.word	0x08001639
 80015e0:	08001645 	.word	0x08001645
 80015e4:	08001645 	.word	0x08001645
 80015e8:	08001645 	.word	0x08001645
 80015ec:	08001645 	.word	0x08001645
 80015f0:	08001645 	.word	0x08001645
 80015f4:	08001645 	.word	0x08001645
 80015f8:	08001645 	.word	0x08001645
 80015fc:	0800162d 	.word	0x0800162d
 8001600:	08001645 	.word	0x08001645
 8001604:	08001645 	.word	0x08001645
 8001608:	08001645 	.word	0x08001645
 800160c:	08001645 	.word	0x08001645
 8001610:	08001645 	.word	0x08001645
 8001614:	08001645 	.word	0x08001645
 8001618:	08001645 	.word	0x08001645
 800161c:	08001621 	.word	0x08001621
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b06      	cmp	r3, #6
 8001624:	d913      	bls.n	800164e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800162a:	e010      	b.n	800164e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b07      	cmp	r3, #7
 8001630:	d90f      	bls.n	8001652 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001636:	e00c      	b.n	8001652 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	d90b      	bls.n	8001656 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001642:	e008      	b.n	8001656 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	75fb      	strb	r3, [r7, #23]
      break;
 8001648:	e006      	b.n	8001658 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800164a:	bf00      	nop
 800164c:	e004      	b.n	8001658 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800164e:	bf00      	nop
 8001650:	e002      	b.n	8001658 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001652:	bf00      	nop
 8001654:	e000      	b.n	8001658 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001656:	bf00      	nop
  }
  if (status == HAL_OK)
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10d      	bne.n	800167a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 0118 	bic.w	r1, r3, #24
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	430a      	orrs	r2, r1
 8001678:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800167a:	7dfb      	ldrb	r3, [r7, #23]
}
 800167c:	4618      	mov	r0, r3
 800167e:	371c      	adds	r7, #28
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff fcb8 	bl	8001008 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e099      	b.n	80017d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0201 	bic.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c4:	e00f      	b.n	80016e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016c6:	f7ff fc9f 	bl	8001008 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	d908      	bls.n	80016e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2220      	movs	r2, #32
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2203      	movs	r2, #3
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e078      	b.n	80017d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e8      	bne.n	80016c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_DMA_Init+0x158>)
 8001700:	4013      	ands	r3, r2
 8001702:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001712:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2b04      	cmp	r3, #4
 800173e:	d107      	bne.n	8001750 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	4313      	orrs	r3, r2
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4313      	orrs	r3, r2
 800174e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f023 0307 	bic.w	r3, r3, #7
 8001766:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	4313      	orrs	r3, r2
 8001770:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	2b04      	cmp	r3, #4
 8001778:	d117      	bne.n	80017aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4313      	orrs	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00e      	beq.n	80017aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fb09 	bl	8001da4 <DMA_CheckFifoParam>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017a6:	2301      	movs	r3, #1
 80017a8:	e016      	b.n	80017d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fac0 	bl	8001d38 <DMA_CalcBaseAndBitshift>
 80017b8:	4603      	mov	r3, r0
 80017ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c0:	223f      	movs	r2, #63	; 0x3f
 80017c2:	409a      	lsls	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	e010803f 	.word	0xe010803f

080017e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_DMA_Start_IT+0x26>
 8001806:	2302      	movs	r3, #2
 8001808:	e048      	b.n	800189c <HAL_DMA_Start_IT+0xb8>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d137      	bne.n	800188e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2202      	movs	r2, #2
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fa52 	bl	8001cdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183c:	223f      	movs	r2, #63	; 0x3f
 800183e:	409a      	lsls	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0216 	orr.w	r2, r2, #22
 8001852:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001862:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	2b00      	cmp	r3, #0
 800186a:	d007      	beq.n	800187c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0208 	orr.w	r2, r2, #8
 800187a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e005      	b.n	800189a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001896:	2302      	movs	r3, #2
 8001898:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800189a:	7dfb      	ldrb	r3, [r7, #23]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018b2:	f7ff fba9 	bl	8001008 <HAL_GetTick>
 80018b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d008      	beq.n	80018d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e052      	b.n	800197c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0216 	bic.w	r2, r2, #22
 80018e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d103      	bne.n	8001906 <HAL_DMA_Abort+0x62>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0208 	bic.w	r2, r2, #8
 8001914:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0201 	bic.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001926:	e013      	b.n	8001950 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001928:	f7ff fb6e 	bl	8001008 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b05      	cmp	r3, #5
 8001934:	d90c      	bls.n	8001950 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2220      	movs	r2, #32
 800193a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2203      	movs	r2, #3
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e015      	b.n	800197c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1e4      	bne.n	8001928 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001962:	223f      	movs	r2, #63	; 0x3f
 8001964:	409a      	lsls	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d004      	beq.n	80019a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e00c      	b.n	80019bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2205      	movs	r2, #5
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80019d4:	4b92      	ldr	r3, [pc, #584]	; (8001c20 <HAL_DMA_IRQHandler+0x258>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a92      	ldr	r2, [pc, #584]	; (8001c24 <HAL_DMA_IRQHandler+0x25c>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0a9b      	lsrs	r3, r3, #10
 80019e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2208      	movs	r2, #8
 80019f4:	409a      	lsls	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d01a      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0204 	bic.w	r2, r2, #4
 8001a1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	2208      	movs	r2, #8
 8001a22:	409a      	lsls	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	2201      	movs	r2, #1
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d012      	beq.n	8001a6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a56:	2201      	movs	r2, #1
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a62:	f043 0202 	orr.w	r2, r3, #2
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6e:	2204      	movs	r2, #4
 8001a70:	409a      	lsls	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d012      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00b      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	f043 0204 	orr.w	r2, r3, #4
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d043      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d03c      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d018      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d108      	bne.n	8001af8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d024      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	4798      	blx	r3
 8001af6:	e01f      	b.n	8001b38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01b      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	4798      	blx	r3
 8001b08:	e016      	b.n	8001b38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d107      	bne.n	8001b28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0208 	bic.w	r2, r2, #8
 8001b26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 808e 	beq.w	8001c66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 8086 	beq.w	8001c66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5e:	2220      	movs	r2, #32
 8001b60:	409a      	lsls	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d136      	bne.n	8001be0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0216 	bic.w	r2, r2, #22
 8001b80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d103      	bne.n	8001ba2 <HAL_DMA_IRQHandler+0x1da>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0208 	bic.w	r2, r2, #8
 8001bb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb6:	223f      	movs	r2, #63	; 0x3f
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d07d      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	4798      	blx	r3
        }
        return;
 8001bde:	e078      	b.n	8001cd2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d01c      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d108      	bne.n	8001c0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d030      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	4798      	blx	r3
 8001c0c:	e02b      	b.n	8001c66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d027      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	4798      	blx	r3
 8001c1e:	e022      	b.n	8001c66 <HAL_DMA_IRQHandler+0x29e>
 8001c20:	20000000 	.word	0x20000000
 8001c24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10f      	bne.n	8001c56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0210 	bic.w	r2, r2, #16
 8001c44:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d032      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d022      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	3301      	adds	r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d307      	bcc.n	8001cae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f2      	bne.n	8001c92 <HAL_DMA_IRQHandler+0x2ca>
 8001cac:	e000      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001cae:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
 8001cd0:	e000      	b.n	8001cd4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001cd2:	bf00      	nop
    }
  }
}
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop

08001cdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b40      	cmp	r3, #64	; 0x40
 8001d08:	d108      	bne.n	8001d1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d1a:	e007      	b.n	8001d2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	60da      	str	r2, [r3, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	3b10      	subs	r3, #16
 8001d48:	4a13      	ldr	r2, [pc, #76]	; (8001d98 <DMA_CalcBaseAndBitshift+0x60>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <DMA_CalcBaseAndBitshift+0x64>)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d908      	bls.n	8001d78 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <DMA_CalcBaseAndBitshift+0x68>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	1d1a      	adds	r2, r3, #4
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	659a      	str	r2, [r3, #88]	; 0x58
 8001d76:	e006      	b.n	8001d86 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <DMA_CalcBaseAndBitshift+0x68>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	aaaaaaab 	.word	0xaaaaaaab
 8001d9c:	080053c4 	.word	0x080053c4
 8001da0:	fffffc00 	.word	0xfffffc00

08001da4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11f      	bne.n	8001dfe <DMA_CheckFifoParam+0x5a>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d856      	bhi.n	8001e72 <DMA_CheckFifoParam+0xce>
 8001dc4:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <DMA_CheckFifoParam+0x28>)
 8001dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dca:	bf00      	nop
 8001dcc:	08001ddd 	.word	0x08001ddd
 8001dd0:	08001def 	.word	0x08001def
 8001dd4:	08001ddd 	.word	0x08001ddd
 8001dd8:	08001e73 	.word	0x08001e73
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d046      	beq.n	8001e76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dec:	e043      	b.n	8001e76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001df6:	d140      	bne.n	8001e7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dfc:	e03d      	b.n	8001e7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e06:	d121      	bne.n	8001e4c <DMA_CheckFifoParam+0xa8>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d837      	bhi.n	8001e7e <DMA_CheckFifoParam+0xda>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <DMA_CheckFifoParam+0x70>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e25 	.word	0x08001e25
 8001e18:	08001e2b 	.word	0x08001e2b
 8001e1c:	08001e25 	.word	0x08001e25
 8001e20:	08001e3d 	.word	0x08001e3d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
      break;
 8001e28:	e030      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d025      	beq.n	8001e82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e3a:	e022      	b.n	8001e82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e44:	d11f      	bne.n	8001e86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e4a:	e01c      	b.n	8001e86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d903      	bls.n	8001e5a <DMA_CheckFifoParam+0xb6>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d003      	beq.n	8001e60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e58:	e018      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e5e:	e015      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00e      	beq.n	8001e8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e70:	e00b      	b.n	8001e8a <DMA_CheckFifoParam+0xe6>
      break;
 8001e72:	bf00      	nop
 8001e74:	e00a      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e76:	bf00      	nop
 8001e78:	e008      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e7a:	bf00      	nop
 8001e7c:	e006      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e7e:	bf00      	nop
 8001e80:	e004      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e82:	bf00      	nop
 8001e84:	e002      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e86:	bf00      	nop
 8001e88:	e000      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e8a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e175      	b.n	80021a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 8164 	bne.w	80021a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x56>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80be 	beq.w	80021a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	4b66      	ldr	r3, [pc, #408]	; (80021c0 <HAL_GPIO_Init+0x324>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a65      	ldr	r2, [pc, #404]	; (80021c0 <HAL_GPIO_Init+0x324>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <HAL_GPIO_Init+0x324>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800203e:	4a61      	ldr	r2, [pc, #388]	; (80021c4 <HAL_GPIO_Init+0x328>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_GPIO_Init+0x32c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d037      	beq.n	80020da <HAL_GPIO_Init+0x23e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a57      	ldr	r2, [pc, #348]	; (80021cc <HAL_GPIO_Init+0x330>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d031      	beq.n	80020d6 <HAL_GPIO_Init+0x23a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a56      	ldr	r2, [pc, #344]	; (80021d0 <HAL_GPIO_Init+0x334>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d02b      	beq.n	80020d2 <HAL_GPIO_Init+0x236>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a55      	ldr	r2, [pc, #340]	; (80021d4 <HAL_GPIO_Init+0x338>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d025      	beq.n	80020ce <HAL_GPIO_Init+0x232>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a54      	ldr	r2, [pc, #336]	; (80021d8 <HAL_GPIO_Init+0x33c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <HAL_GPIO_Init+0x22e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a53      	ldr	r2, [pc, #332]	; (80021dc <HAL_GPIO_Init+0x340>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d019      	beq.n	80020c6 <HAL_GPIO_Init+0x22a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a52      	ldr	r2, [pc, #328]	; (80021e0 <HAL_GPIO_Init+0x344>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_GPIO_Init+0x226>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a51      	ldr	r2, [pc, #324]	; (80021e4 <HAL_GPIO_Init+0x348>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00d      	beq.n	80020be <HAL_GPIO_Init+0x222>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a50      	ldr	r2, [pc, #320]	; (80021e8 <HAL_GPIO_Init+0x34c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d007      	beq.n	80020ba <HAL_GPIO_Init+0x21e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <HAL_GPIO_Init+0x350>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_GPIO_Init+0x21a>
 80020b2:	2309      	movs	r3, #9
 80020b4:	e012      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020b6:	230a      	movs	r3, #10
 80020b8:	e010      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020ba:	2308      	movs	r3, #8
 80020bc:	e00e      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020be:	2307      	movs	r3, #7
 80020c0:	e00c      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020c2:	2306      	movs	r3, #6
 80020c4:	e00a      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020da:	2300      	movs	r3, #0
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020ec:	4935      	ldr	r1, [pc, #212]	; (80021c4 <HAL_GPIO_Init+0x328>)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <HAL_GPIO_Init+0x354>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211e:	4a34      	ldr	r2, [pc, #208]	; (80021f0 <HAL_GPIO_Init+0x354>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002124:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <HAL_GPIO_Init+0x354>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002148:	4a29      	ldr	r2, [pc, #164]	; (80021f0 <HAL_GPIO_Init+0x354>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_GPIO_Init+0x354>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002172:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_GPIO_Init+0x354>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_GPIO_Init+0x354>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <HAL_GPIO_Init+0x354>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	f67f ae86 	bls.w	8001ebc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40013800 	.word	0x40013800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40021800 	.word	0x40021800
 80021e4:	40021c00 	.word	0x40021c00
 80021e8:	40022000 	.word	0x40022000
 80021ec:	40022400 	.word	0x40022400
 80021f0:	40013c00 	.word	0x40013c00

080021f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002204:	787b      	ldrb	r3, [r7, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002210:	e003      	b.n	800221a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	041a      	lsls	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	619a      	str	r2, [r3, #24]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002228:	b08f      	sub	sp, #60	; 0x3c
 800222a:	af0a      	add	r7, sp, #40	; 0x28
 800222c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e116      	b.n	8002466 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fde4 	bl	8000e20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2203      	movs	r2, #3
 800225c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f002 fdc8 	bl	8004e0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	687e      	ldr	r6, [r7, #4]
 8002284:	466d      	mov	r5, sp
 8002286:	f106 0410 	add.w	r4, r6, #16
 800228a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800228c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800228e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002292:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002296:	e885 0003 	stmia.w	r5, {r0, r1}
 800229a:	1d33      	adds	r3, r6, #4
 800229c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800229e:	6838      	ldr	r0, [r7, #0]
 80022a0:	f002 fd5c 	bl	8004d5c <USB_CoreInit>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2202      	movs	r2, #2
 80022ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0d7      	b.n	8002466 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 fdb6 	bl	8004e2e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
 80022c6:	e04a      	b.n	800235e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	333d      	adds	r3, #61	; 0x3d
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	333c      	adds	r3, #60	; 0x3c
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	b298      	uxth	r0, r3
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3342      	adds	r3, #66	; 0x42
 8002304:	4602      	mov	r2, r0
 8002306:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	333f      	adds	r3, #63	; 0x3f
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	3344      	adds	r3, #68	; 0x44
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	3348      	adds	r3, #72	; 0x48
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3350      	adds	r3, #80	; 0x50
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	3301      	adds	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	d3af      	bcc.n	80022c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	e044      	b.n	80023f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	3301      	adds	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d3b5      	bcc.n	800236e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	687e      	ldr	r6, [r7, #4]
 800240a:	466d      	mov	r5, sp
 800240c:	f106 0410 	add.w	r4, r6, #16
 8002410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002418:	e894 0003 	ldmia.w	r4, {r0, r1}
 800241c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002420:	1d33      	adds	r3, r6, #4
 8002422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002424:	6838      	ldr	r0, [r7, #0]
 8002426:	f002 fd4f 	bl	8004ec8 <USB_DevInit>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e014      	b.n	8002466 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	2b01      	cmp	r3, #1
 8002452:	d102      	bne.n	800245a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f80b 	bl	8002470 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f002 ff09 	bl	8005276 <USB_DevDisconnect>

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002470 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	10000003 	.word	0x10000003

080024b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40007000 	.word	0x40007000

080024d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_PWREx_EnableOverDrive+0x98>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	4a22      	ldr	r2, [pc, #136]	; (8002570 <HAL_PWREx_EnableOverDrive+0x98>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ec:	6413      	str	r3, [r2, #64]	; 0x40
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_PWREx_EnableOverDrive+0x98>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024fa:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002506:	f7fe fd7f 	bl	8001008 <HAL_GetTick>
 800250a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800250c:	e009      	b.n	8002522 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800250e:	f7fe fd7b 	bl	8001008 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800251c:	d901      	bls.n	8002522 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e022      	b.n	8002568 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252e:	d1ee      	bne.n	800250e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800253a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800253c:	f7fe fd64 	bl	8001008 <HAL_GetTick>
 8002540:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002542:	e009      	b.n	8002558 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002544:	f7fe fd60 	bl	8001008 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002552:	d901      	bls.n	8002558 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e007      	b.n	8002568 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_PWREx_EnableOverDrive+0x9c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002564:	d1ee      	bne.n	8002544 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	40007000 	.word	0x40007000

08002578 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e29b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8087 	beq.w	80026aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800259c:	4b96      	ldr	r3, [pc, #600]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d00c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a8:	4b93      	ldr	r3, [pc, #588]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d112      	bne.n	80025da <HAL_RCC_OscConfig+0x62>
 80025b4:	4b90      	ldr	r3, [pc, #576]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c0:	d10b      	bne.n	80025da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c2:	4b8d      	ldr	r3, [pc, #564]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d06c      	beq.n	80026a8 <HAL_RCC_OscConfig+0x130>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d168      	bne.n	80026a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e275      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x7a>
 80025e4:	4b84      	ldr	r3, [pc, #528]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a83      	ldr	r2, [pc, #524]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e02e      	b.n	8002650 <HAL_RCC_OscConfig+0xd8>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0x9c>
 80025fa:	4b7f      	ldr	r3, [pc, #508]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a7e      	ldr	r2, [pc, #504]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b7c      	ldr	r3, [pc, #496]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a7b      	ldr	r2, [pc, #492]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800260c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e01d      	b.n	8002650 <HAL_RCC_OscConfig+0xd8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0xc0>
 800261e:	4b76      	ldr	r3, [pc, #472]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a75      	ldr	r2, [pc, #468]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a72      	ldr	r2, [pc, #456]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e00b      	b.n	8002650 <HAL_RCC_OscConfig+0xd8>
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a6e      	ldr	r2, [pc, #440]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800263e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4b6c      	ldr	r3, [pc, #432]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a6b      	ldr	r2, [pc, #428]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800264a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fcd6 	bl	8001008 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7fe fcd2 	bl	8001008 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e229      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b61      	ldr	r3, [pc, #388]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0xe8>
 800267e:	e014      	b.n	80026aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fcc2 	bl	8001008 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002688:	f7fe fcbe 	bl	8001008 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e215      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269a:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x110>
 80026a6:	e000      	b.n	80026aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d069      	beq.n	800278a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026b6:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c2:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d11c      	bne.n	8002708 <HAL_RCC_OscConfig+0x190>
 80026ce:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d116      	bne.n	8002708 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_RCC_OscConfig+0x17a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e1e9      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	493d      	ldr	r1, [pc, #244]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	e040      	b.n	800278a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d023      	beq.n	8002758 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002710:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a38      	ldr	r2, [pc, #224]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fc74 	bl	8001008 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002724:	f7fe fc70 	bl	8001008 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1c7      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4929      	ldr	r1, [pc, #164]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
 8002756:	e018      	b.n	800278a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002758:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a26      	ldr	r2, [pc, #152]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fc50 	bl	8001008 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276c:	f7fe fc4c 	bl	8001008 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1a3      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d038      	beq.n	8002808 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d019      	beq.n	80027d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80027a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a2:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7fe fc2d 	bl	8001008 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b2:	f7fe fc29 	bl	8001008 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e180      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80027c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x23a>
 80027d0:	e01a      	b.n	8002808 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80027d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d6:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7fe fc13 	bl	8001008 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e6:	f7fe fc0f 	bl	8001008 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d903      	bls.n	80027fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e166      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
 80027f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	4b92      	ldr	r3, [pc, #584]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80027fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ee      	bne.n	80027e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80a4 	beq.w	800295e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002816:	4b8c      	ldr	r3, [pc, #560]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	4b89      	ldr	r3, [pc, #548]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a88      	ldr	r2, [pc, #544]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b86      	ldr	r3, [pc, #536]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283a:	2301      	movs	r3, #1
 800283c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283e:	4b83      	ldr	r3, [pc, #524]	; (8002a4c <HAL_RCC_OscConfig+0x4d4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d118      	bne.n	800287c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800284a:	4b80      	ldr	r3, [pc, #512]	; (8002a4c <HAL_RCC_OscConfig+0x4d4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a7f      	ldr	r2, [pc, #508]	; (8002a4c <HAL_RCC_OscConfig+0x4d4>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002856:	f7fe fbd7 	bl	8001008 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285e:	f7fe fbd3 	bl	8001008 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	; 0x64
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e12a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002870:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <HAL_RCC_OscConfig+0x4d4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x31a>
 8002884:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	4a6f      	ldr	r2, [pc, #444]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6713      	str	r3, [r2, #112]	; 0x70
 8002890:	e02d      	b.n	80028ee <HAL_RCC_OscConfig+0x376>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x33c>
 800289a:	4b6b      	ldr	r3, [pc, #428]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a6a      	ldr	r2, [pc, #424]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70
 80028a6:	4b68      	ldr	r3, [pc, #416]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	4a67      	ldr	r2, [pc, #412]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	6713      	str	r3, [r2, #112]	; 0x70
 80028b2:	e01c      	b.n	80028ee <HAL_RCC_OscConfig+0x376>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x35e>
 80028bc:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a61      	ldr	r2, [pc, #388]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
 80028c8:	4b5f      	ldr	r3, [pc, #380]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	4a5e      	ldr	r2, [pc, #376]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6713      	str	r3, [r2, #112]	; 0x70
 80028d4:	e00b      	b.n	80028ee <HAL_RCC_OscConfig+0x376>
 80028d6:	4b5c      	ldr	r3, [pc, #368]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	4a5b      	ldr	r2, [pc, #364]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6713      	str	r3, [r2, #112]	; 0x70
 80028e2:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d015      	beq.n	8002922 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7fe fb87 	bl	8001008 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe fb83 	bl	8001008 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0d8      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	4b4c      	ldr	r3, [pc, #304]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ee      	beq.n	80028fe <HAL_RCC_OscConfig+0x386>
 8002920:	e014      	b.n	800294c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fe fb71 	bl	8001008 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe fb6d 	bl	8001008 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0c2      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ee      	bne.n	800292a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d105      	bne.n	800295e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a3c      	ldr	r2, [pc, #240]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80ae 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002968:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d06d      	beq.n	8002a50 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d14b      	bne.n	8002a14 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fb3e 	bl	8001008 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fb3a 	bl	8001008 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e091      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	019b      	lsls	r3, r3, #6
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	3b01      	subs	r3, #1
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	071b      	lsls	r3, r3, #28
 80029da:	491b      	ldr	r1, [pc, #108]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 80029e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe fb0c 	bl	8001008 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe fb08 	bl	8001008 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e05f      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x47c>
 8002a12:	e057      	b.n	8002ac4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe faf2 	bl	8001008 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe faee 	bl	8001008 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e045      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_RCC_OscConfig+0x4d0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4b0>
 8002a46:	e03d      	b.n	8002ac4 <HAL_RCC_OscConfig+0x54c>
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a50:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <HAL_RCC_OscConfig+0x558>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d030      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d129      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d122      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d119      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0d0      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d910      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 020f 	bic.w	r2, r3, #15
 8002b02:	4965      	ldr	r1, [pc, #404]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b8      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	494d      	ldr	r1, [pc, #308]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d040      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d115      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e073      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06b      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4936      	ldr	r1, [pc, #216]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fa1e 	bl	8001008 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7fe fa1a 	bl	8001008 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e053      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d210      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 020f 	bic.w	r2, r3, #15
 8002c0e:	4922      	ldr	r1, [pc, #136]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4916      	ldr	r1, [pc, #88]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	490e      	ldr	r1, [pc, #56]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c66:	f000 f821 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	490a      	ldr	r1, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x1cc>)
 8002c78:	5ccb      	ldrb	r3, [r1, r3]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1d0>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_ClockConfig+0x1d4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe f97a 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	080053ac 	.word	0x080053ac
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	607b      	str	r3, [r7, #4]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc4:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d00d      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x40>
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	f200 80bd 	bhi.w	8002e50 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cde:	e0b7      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce0:	4b61      	ldr	r3, [pc, #388]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ce2:	60bb      	str	r3, [r7, #8]
      break;
 8002ce4:	e0b7      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ce6:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ce8:	60bb      	str	r3, [r7, #8]
      break;
 8002cea:	e0b4      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cec:	4b5d      	ldr	r3, [pc, #372]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002cf6:	4b5b      	ldr	r3, [pc, #364]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d04d      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d02:	4b58      	ldr	r3, [pc, #352]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	ea02 0800 	and.w	r8, r2, r0
 8002d1a:	ea03 0901 	and.w	r9, r3, r1
 8002d1e:	4640      	mov	r0, r8
 8002d20:	4649      	mov	r1, r9
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	014b      	lsls	r3, r1, #5
 8002d2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d30:	0142      	lsls	r2, r0, #5
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	ebb0 0008 	subs.w	r0, r0, r8
 8002d3a:	eb61 0109 	sbc.w	r1, r1, r9
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	018b      	lsls	r3, r1, #6
 8002d48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d4c:	0182      	lsls	r2, r0, #6
 8002d4e:	1a12      	subs	r2, r2, r0
 8002d50:	eb63 0301 	sbc.w	r3, r3, r1
 8002d54:	f04f 0000 	mov.w	r0, #0
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	00d9      	lsls	r1, r3, #3
 8002d5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d62:	00d0      	lsls	r0, r2, #3
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	eb12 0208 	adds.w	r2, r2, r8
 8002d6c:	eb43 0309 	adc.w	r3, r3, r9
 8002d70:	f04f 0000 	mov.w	r0, #0
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	0259      	lsls	r1, r3, #9
 8002d7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d7e:	0250      	lsls	r0, r2, #9
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	f7fd fa52 	bl	8000238 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	e04a      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9e:	4b31      	ldr	r3, [pc, #196]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	461a      	mov	r2, r3
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dae:	f04f 0100 	mov.w	r1, #0
 8002db2:	ea02 0400 	and.w	r4, r2, r0
 8002db6:	ea03 0501 	and.w	r5, r3, r1
 8002dba:	4620      	mov	r0, r4
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	014b      	lsls	r3, r1, #5
 8002dc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002dcc:	0142      	lsls	r2, r0, #5
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	1b00      	subs	r0, r0, r4
 8002dd4:	eb61 0105 	sbc.w	r1, r1, r5
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	018b      	lsls	r3, r1, #6
 8002de2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002de6:	0182      	lsls	r2, r0, #6
 8002de8:	1a12      	subs	r2, r2, r0
 8002dea:	eb63 0301 	sbc.w	r3, r3, r1
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	00d9      	lsls	r1, r3, #3
 8002df8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dfc:	00d0      	lsls	r0, r2, #3
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	1912      	adds	r2, r2, r4
 8002e04:	eb45 0303 	adc.w	r3, r5, r3
 8002e08:	f04f 0000 	mov.w	r0, #0
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	0299      	lsls	r1, r3, #10
 8002e12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e16:	0290      	lsls	r0, r2, #10
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	461a      	mov	r2, r3
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	f7fd fa06 	bl	8000238 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4613      	mov	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4c:	60bb      	str	r3, [r7, #8]
      break;
 8002e4e:	e002      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e52:	60bb      	str	r3, [r7, #8]
      break;
 8002e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e56:	68bb      	ldr	r3, [r7, #8]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	00f42400 	.word	0x00f42400
 8002e6c:	007a1200 	.word	0x007a1200

08002e70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000000 	.word	0x20000000

08002e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e8c:	f7ff fff0 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	0a9b      	lsrs	r3, r3, #10
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4903      	ldr	r1, [pc, #12]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	080053bc 	.word	0x080053bc

08002eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002eb4:	f7ff ffdc 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0b5b      	lsrs	r3, r3, #13
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4903      	ldr	r1, [pc, #12]	; (8002ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	080053bc 	.word	0x080053bc

08002ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d012      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f00:	4b69      	ldr	r3, [pc, #420]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a68      	ldr	r2, [pc, #416]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f0a:	6093      	str	r3, [r2, #8]
 8002f0c:	4b66      	ldr	r3, [pc, #408]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	4964      	ldr	r1, [pc, #400]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d017      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f32:	4b5d      	ldr	r3, [pc, #372]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	4959      	ldr	r1, [pc, #356]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f50:	d101      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d017      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f6e:	4b4e      	ldr	r3, [pc, #312]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	494a      	ldr	r1, [pc, #296]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002faa:	2301      	movs	r3, #1
 8002fac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 808b 	beq.w	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fbc:	4b3a      	ldr	r3, [pc, #232]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	4a39      	ldr	r2, [pc, #228]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc8:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fd4:	4b35      	ldr	r3, [pc, #212]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a34      	ldr	r2, [pc, #208]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe0:	f7fe f812 	bl	8001008 <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe8:	f7fe f80e 	bl	8001008 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e38f      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ffa:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003006:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d035      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	429a      	cmp	r2, r3
 8003022:	d02e      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003024:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800302e:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	4a1d      	ldr	r2, [pc, #116]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800303a:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003044:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003046:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800304c:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d114      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fd ffd6 	bl	8001008 <HAL_GetTick>
 800305c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7fd ffd2 	bl	8001008 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e351      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ee      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800308e:	d111      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800309e:	400b      	ands	r3, r1
 80030a0:	4901      	ldr	r1, [pc, #4]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
 80030a6:	e00b      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40007000 	.word	0x40007000
 80030b0:	0ffffcff 	.word	0x0ffffcff
 80030b4:	4bb3      	ldr	r3, [pc, #716]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4ab2      	ldr	r2, [pc, #712]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030be:	6093      	str	r3, [r2, #8]
 80030c0:	4bb0      	ldr	r3, [pc, #704]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	49ad      	ldr	r1, [pc, #692]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d010      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030de:	4ba9      	ldr	r3, [pc, #676]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e4:	4aa7      	ldr	r2, [pc, #668]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030ee:	4ba5      	ldr	r3, [pc, #660]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	49a2      	ldr	r1, [pc, #648]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800310c:	4b9d      	ldr	r3, [pc, #628]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800311a:	499a      	ldr	r1, [pc, #616]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800312e:	4b95      	ldr	r3, [pc, #596]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800313c:	4991      	ldr	r1, [pc, #580]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003150:	4b8c      	ldr	r3, [pc, #560]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800315e:	4989      	ldr	r1, [pc, #548]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003172:	4b84      	ldr	r3, [pc, #528]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	4980      	ldr	r1, [pc, #512]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003194:	4b7b      	ldr	r3, [pc, #492]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	4978      	ldr	r1, [pc, #480]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b6:	4b73      	ldr	r3, [pc, #460]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031bc:	f023 020c 	bic.w	r2, r3, #12
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c4:	496f      	ldr	r1, [pc, #444]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031d8:	4b6a      	ldr	r3, [pc, #424]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	4967      	ldr	r1, [pc, #412]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031fa:	4b62      	ldr	r3, [pc, #392]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003200:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003208:	495e      	ldr	r1, [pc, #376]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800321c:	4b59      	ldr	r3, [pc, #356]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	4956      	ldr	r1, [pc, #344]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800323e:	4b51      	ldr	r3, [pc, #324]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	494d      	ldr	r1, [pc, #308]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003260:	4b48      	ldr	r3, [pc, #288]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	4945      	ldr	r1, [pc, #276]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003282:	4b40      	ldr	r3, [pc, #256]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003290:	493c      	ldr	r1, [pc, #240]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032a4:	4b37      	ldr	r3, [pc, #220]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032b2:	4934      	ldr	r1, [pc, #208]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d011      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032c6:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032d4:	492b      	ldr	r1, [pc, #172]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e4:	d101      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80032e6:	2301      	movs	r3, #1
 80032e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80032f6:	2301      	movs	r3, #1
 80032f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003306:	4b1f      	ldr	r3, [pc, #124]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003314:	491b      	ldr	r1, [pc, #108]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003328:	4b16      	ldr	r3, [pc, #88]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003338:	4912      	ldr	r1, [pc, #72]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00b      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335c:	4909      	ldr	r1, [pc, #36]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00f      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003376:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	e002      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	4986      	ldr	r1, [pc, #536]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800339c:	4b81      	ldr	r3, [pc, #516]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ac:	497d      	ldr	r1, [pc, #500]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d006      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80d6 	beq.w	8003574 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033c8:	4b76      	ldr	r3, [pc, #472]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a75      	ldr	r2, [pc, #468]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d4:	f7fd fe18 	bl	8001008 <HAL_GetTick>
 80033d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033dc:	f7fd fe14 	bl	8001008 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	; 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e195      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033ee:	4b6d      	ldr	r3, [pc, #436]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d021      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	d11d      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800340e:	4b65      	ldr	r3, [pc, #404]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003414:	0c1b      	lsrs	r3, r3, #16
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800341c:	4b61      	ldr	r3, [pc, #388]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003422:	0e1b      	lsrs	r3, r3, #24
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	019a      	lsls	r2, r3, #6
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	041b      	lsls	r3, r3, #16
 8003434:	431a      	orrs	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	061b      	lsls	r3, r3, #24
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	4958      	ldr	r1, [pc, #352]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003468:	2b00      	cmp	r3, #0
 800346a:	d02e      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003474:	d129      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003476:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003484:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800348a:	0f1b      	lsrs	r3, r3, #28
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	019a      	lsls	r2, r3, #6
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	071b      	lsls	r3, r3, #28
 80034aa:	493e      	ldr	r1, [pc, #248]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80034b2:	4b3c      	ldr	r3, [pc, #240]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b8:	f023 021f 	bic.w	r2, r3, #31
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	3b01      	subs	r3, #1
 80034c2:	4938      	ldr	r1, [pc, #224]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01d      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034d6:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034dc:	0e1b      	lsrs	r3, r3, #24
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034e4:	4b2f      	ldr	r3, [pc, #188]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ea:	0f1b      	lsrs	r3, r3, #28
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	019a      	lsls	r2, r3, #6
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	431a      	orrs	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	061b      	lsls	r3, r3, #24
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	071b      	lsls	r3, r3, #28
 800350a:	4926      	ldr	r1, [pc, #152]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d011      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	019a      	lsls	r2, r3, #6
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	041b      	lsls	r3, r3, #16
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	071b      	lsls	r3, r3, #28
 800353a:	491a      	ldr	r1, [pc, #104]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003542:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a17      	ldr	r2, [pc, #92]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003548:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800354c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354e:	f7fd fd5b 	bl	8001008 <HAL_GetTick>
 8003552:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003556:	f7fd fd57 	bl	8001008 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b64      	cmp	r3, #100	; 0x64
 8003562:	d901      	bls.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e0d8      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b01      	cmp	r3, #1
 8003578:	f040 80ce 	bne.w	8003718 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a08      	ldr	r2, [pc, #32]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003588:	f7fd fd3e 	bl	8001008 <HAL_GetTick>
 800358c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800358e:	e00b      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003590:	f7fd fd3a 	bl	8001008 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d904      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0bb      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035a8:	4b5e      	ldr	r3, [pc, #376]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b4:	d0ec      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d02e      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d12a      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035de:	4b51      	ldr	r3, [pc, #324]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035ec:	4b4d      	ldr	r3, [pc, #308]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	0f1b      	lsrs	r3, r3, #28
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	019a      	lsls	r2, r3, #6
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	061b      	lsls	r3, r3, #24
 800360c:	431a      	orrs	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	071b      	lsls	r3, r3, #28
 8003612:	4944      	ldr	r1, [pc, #272]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800361a:	4b42      	ldr	r3, [pc, #264]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003620:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	3b01      	subs	r3, #1
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	493d      	ldr	r1, [pc, #244]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d022      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003648:	d11d      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800364a:	4b36      	ldr	r3, [pc, #216]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	0e1b      	lsrs	r3, r3, #24
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003658:	4b32      	ldr	r3, [pc, #200]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	0f1b      	lsrs	r3, r3, #28
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	019a      	lsls	r2, r3, #6
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	041b      	lsls	r3, r3, #16
 8003672:	431a      	orrs	r2, r3
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	061b      	lsls	r3, r3, #24
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	071b      	lsls	r3, r3, #28
 800367e:	4929      	ldr	r1, [pc, #164]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d028      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	0e1b      	lsrs	r3, r3, #24
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036a0:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	019a      	lsls	r2, r3, #6
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	431a      	orrs	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	071b      	lsls	r3, r3, #28
 80036c6:	4917      	ldr	r1, [pc, #92]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	4911      	ldr	r1, [pc, #68]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f0:	f7fd fc8a 	bl	8001008 <HAL_GetTick>
 80036f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036f8:	f7fd fc86 	bl	8001008 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	; 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e007      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003716:	d1ef      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800

08003728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e040      	b.n	80037bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd fa6e 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fbd8 	bl	8003f1c <UART_SetConfig>
 800376c:	4603      	mov	r3, r0
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e022      	b.n	80037bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fe2e 	bl	80043e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 feb5 	bl	8004524 <UART_CheckIdleState>
 80037ba:	4603      	mov	r3, r0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d178      	bne.n	80038cc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_UART_Transmit_DMA+0x22>
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e071      	b.n	80038ce <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_UART_Transmit_DMA+0x34>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e06a      	b.n	80038ce <HAL_UART_Transmit_DMA+0x10a>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	88fa      	ldrh	r2, [r7, #6]
 800380a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2221      	movs	r2, #33	; 0x21
 8003822:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d02b      	beq.n	8003884 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003830:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <HAL_UART_Transmit_DMA+0x114>)
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003838:	4a28      	ldr	r2, [pc, #160]	; (80038dc <HAL_UART_Transmit_DMA+0x118>)
 800383a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003840:	4a27      	ldr	r2, [pc, #156]	; (80038e0 <HAL_UART_Transmit_DMA+0x11c>)
 8003842:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003848:	2200      	movs	r2, #0
 800384a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003854:	4619      	mov	r1, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3328      	adds	r3, #40	; 0x28
 800385c:	461a      	mov	r2, r3
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	f7fd ffc0 	bl	80017e4 <HAL_DMA_Start_IT>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00c      	beq.n	8003884 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2210      	movs	r2, #16
 800386e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e024      	b.n	80038ce <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2240      	movs	r2, #64	; 0x40
 800388a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3308      	adds	r3, #8
 800389a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	e853 3f00 	ldrex	r3, [r3]
 80038a2:	613b      	str	r3, [r7, #16]
   return(result);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3308      	adds	r3, #8
 80038b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b4:	623a      	str	r2, [r7, #32]
 80038b6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	69f9      	ldr	r1, [r7, #28]
 80038ba:	6a3a      	ldr	r2, [r7, #32]
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e5      	bne.n	8003894 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
  }
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3728      	adds	r7, #40	; 0x28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	0800499f 	.word	0x0800499f
 80038dc:	08004a35 	.word	0x08004a35
 80038e0:	08004ba9 	.word	0x08004ba9

080038e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b0ba      	sub	sp, #232	; 0xe8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800390a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800390e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003912:	4013      	ands	r3, r2
 8003914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d115      	bne.n	800394c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00f      	beq.n	800394c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800392c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d009      	beq.n	800394c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 82a4 	beq.w	8003e8a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	4798      	blx	r3
      }
      return;
 800394a:	e29e      	b.n	8003e8a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800394c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8117 	beq.w	8003b84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003962:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003966:	4b85      	ldr	r3, [pc, #532]	; (8003b7c <HAL_UART_IRQHandler+0x298>)
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 810a 	beq.w	8003b84 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d011      	beq.n	80039a0 <HAL_UART_IRQHandler+0xbc>
 800397c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00b      	beq.n	80039a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2201      	movs	r2, #1
 800398e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d011      	beq.n	80039d0 <HAL_UART_IRQHandler+0xec>
 80039ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2202      	movs	r2, #2
 80039be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c6:	f043 0204 	orr.w	r2, r3, #4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d011      	beq.n	8003a00 <HAL_UART_IRQHandler+0x11c>
 80039dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2204      	movs	r2, #4
 80039ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f6:	f043 0202 	orr.w	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d017      	beq.n	8003a3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d105      	bne.n	8003a24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00b      	beq.n	8003a3c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2208      	movs	r2, #8
 8003a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a32:	f043 0208 	orr.w	r2, r3, #8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d012      	beq.n	8003a6e <HAL_UART_IRQHandler+0x18a>
 8003a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00c      	beq.n	8003a6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a64:	f043 0220 	orr.w	r2, r3, #32
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 820a 	beq.w	8003e8e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00d      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d005      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003abe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04f      	beq.n	8003b66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 ff06 	bl	80048d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b40      	cmp	r3, #64	; 0x40
 8003ad8:	d141      	bne.n	8003b5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3308      	adds	r3, #8
 8003b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1d9      	bne.n	8003ada <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d013      	beq.n	8003b56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <HAL_UART_IRQHandler+0x29c>)
 8003b34:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fd ff22 	bl	8001984 <HAL_DMA_Abort_IT>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d017      	beq.n	8003b76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003b50:	4610      	mov	r0, r2
 8003b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	e00f      	b.n	8003b76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f9cc 	bl	8003ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	e00b      	b.n	8003b76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f9c8 	bl	8003ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	e007      	b.n	8003b76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f9c4 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003b74:	e18b      	b.n	8003e8e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b76:	bf00      	nop
    return;
 8003b78:	e189      	b.n	8003e8e <HAL_UART_IRQHandler+0x5aa>
 8003b7a:	bf00      	nop
 8003b7c:	04000120 	.word	0x04000120
 8003b80:	08004c25 	.word	0x08004c25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f040 8144 	bne.w	8003e16 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 813d 	beq.w	8003e16 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8136 	beq.w	8003e16 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2210      	movs	r2, #16
 8003bb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	f040 80b2 	bne.w	8003d26 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 815d 	beq.w	8003e92 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003be2:	429a      	cmp	r2, r3
 8003be4:	f080 8155 	bcs.w	8003e92 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfc:	f000 8085 	beq.w	8003d0a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1da      	bne.n	8003c00 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3308      	adds	r3, #8
 8003c50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3308      	adds	r3, #8
 8003c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e1      	bne.n	8003c4a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003caa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e3      	bne.n	8003c86 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cda:	f023 0310 	bic.w	r3, r3, #16
 8003cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cec:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e4      	bne.n	8003cca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fd fdcd 	bl	80018a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fc fd60 	bl	80007e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d24:	e0b5      	b.n	8003e92 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80a7 	beq.w	8003e96 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8003d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a2 	beq.w	8003e96 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d74:	647b      	str	r3, [r7, #68]	; 0x44
 8003d76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e4      	bne.n	8003d52 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	623b      	str	r3, [r7, #32]
   return(result);
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3308      	adds	r3, #8
 8003da8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dac:	633a      	str	r2, [r7, #48]	; 0x30
 8003dae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e3      	bne.n	8003d88 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	69b9      	ldr	r1, [r7, #24]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	617b      	str	r3, [r7, #20]
   return(result);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e4      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fc fce8 	bl	80007e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e14:	e03f      	b.n	8003e96 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00e      	beq.n	8003e40 <HAL_UART_IRQHandler+0x55c>
 8003e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f865 	bl	8003f08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e3e:	e02d      	b.n	8003e9c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00e      	beq.n	8003e6a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01c      	beq.n	8003e9a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4798      	blx	r3
    }
    return;
 8003e68:	e017      	b.n	8003e9a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d012      	beq.n	8003e9c <HAL_UART_IRQHandler+0x5b8>
 8003e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00c      	beq.n	8003e9c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fee4 	bl	8004c50 <UART_EndTransmit_IT>
    return;
 8003e88:	e008      	b.n	8003e9c <HAL_UART_IRQHandler+0x5b8>
      return;
 8003e8a:	bf00      	nop
 8003e8c:	e006      	b.n	8003e9c <HAL_UART_IRQHandler+0x5b8>
    return;
 8003e8e:	bf00      	nop
 8003e90:	e004      	b.n	8003e9c <HAL_UART_IRQHandler+0x5b8>
      return;
 8003e92:	bf00      	nop
 8003e94:	e002      	b.n	8003e9c <HAL_UART_IRQHandler+0x5b8>
      return;
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <HAL_UART_IRQHandler+0x5b8>
    return;
 8003e9a:	bf00      	nop
  }

}
 8003e9c:	37e8      	adds	r7, #232	; 0xe8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop

08003ea4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4ba7      	ldr	r3, [pc, #668]	; (80041e4 <UART_SetConfig+0x2c8>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	6979      	ldr	r1, [r7, #20]
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a95      	ldr	r2, [pc, #596]	; (80041e8 <UART_SetConfig+0x2cc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d120      	bne.n	8003fda <UART_SetConfig+0xbe>
 8003f98:	4b94      	ldr	r3, [pc, #592]	; (80041ec <UART_SetConfig+0x2d0>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d816      	bhi.n	8003fd4 <UART_SetConfig+0xb8>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0x90>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fc9 	.word	0x08003fc9
 8003fb4:	08003fc3 	.word	0x08003fc3
 8003fb8:	08003fcf 	.word	0x08003fcf
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e14f      	b.n	8004262 <UART_SetConfig+0x346>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e14c      	b.n	8004262 <UART_SetConfig+0x346>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e149      	b.n	8004262 <UART_SetConfig+0x346>
 8003fce:	2308      	movs	r3, #8
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e146      	b.n	8004262 <UART_SetConfig+0x346>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e143      	b.n	8004262 <UART_SetConfig+0x346>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a84      	ldr	r2, [pc, #528]	; (80041f0 <UART_SetConfig+0x2d4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d132      	bne.n	800404a <UART_SetConfig+0x12e>
 8003fe4:	4b81      	ldr	r3, [pc, #516]	; (80041ec <UART_SetConfig+0x2d0>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d828      	bhi.n	8004044 <UART_SetConfig+0x128>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0xdc>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	0800402d 	.word	0x0800402d
 8003ffc:	08004045 	.word	0x08004045
 8004000:	08004045 	.word	0x08004045
 8004004:	08004045 	.word	0x08004045
 8004008:	08004039 	.word	0x08004039
 800400c:	08004045 	.word	0x08004045
 8004010:	08004045 	.word	0x08004045
 8004014:	08004045 	.word	0x08004045
 8004018:	08004033 	.word	0x08004033
 800401c:	08004045 	.word	0x08004045
 8004020:	08004045 	.word	0x08004045
 8004024:	08004045 	.word	0x08004045
 8004028:	0800403f 	.word	0x0800403f
 800402c:	2300      	movs	r3, #0
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e117      	b.n	8004262 <UART_SetConfig+0x346>
 8004032:	2302      	movs	r3, #2
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e114      	b.n	8004262 <UART_SetConfig+0x346>
 8004038:	2304      	movs	r3, #4
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e111      	b.n	8004262 <UART_SetConfig+0x346>
 800403e:	2308      	movs	r3, #8
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e10e      	b.n	8004262 <UART_SetConfig+0x346>
 8004044:	2310      	movs	r3, #16
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e10b      	b.n	8004262 <UART_SetConfig+0x346>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a69      	ldr	r2, [pc, #420]	; (80041f4 <UART_SetConfig+0x2d8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d120      	bne.n	8004096 <UART_SetConfig+0x17a>
 8004054:	4b65      	ldr	r3, [pc, #404]	; (80041ec <UART_SetConfig+0x2d0>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800405e:	2b30      	cmp	r3, #48	; 0x30
 8004060:	d013      	beq.n	800408a <UART_SetConfig+0x16e>
 8004062:	2b30      	cmp	r3, #48	; 0x30
 8004064:	d814      	bhi.n	8004090 <UART_SetConfig+0x174>
 8004066:	2b20      	cmp	r3, #32
 8004068:	d009      	beq.n	800407e <UART_SetConfig+0x162>
 800406a:	2b20      	cmp	r3, #32
 800406c:	d810      	bhi.n	8004090 <UART_SetConfig+0x174>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <UART_SetConfig+0x15c>
 8004072:	2b10      	cmp	r3, #16
 8004074:	d006      	beq.n	8004084 <UART_SetConfig+0x168>
 8004076:	e00b      	b.n	8004090 <UART_SetConfig+0x174>
 8004078:	2300      	movs	r3, #0
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e0f1      	b.n	8004262 <UART_SetConfig+0x346>
 800407e:	2302      	movs	r3, #2
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e0ee      	b.n	8004262 <UART_SetConfig+0x346>
 8004084:	2304      	movs	r3, #4
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e0eb      	b.n	8004262 <UART_SetConfig+0x346>
 800408a:	2308      	movs	r3, #8
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e0e8      	b.n	8004262 <UART_SetConfig+0x346>
 8004090:	2310      	movs	r3, #16
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e0e5      	b.n	8004262 <UART_SetConfig+0x346>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a57      	ldr	r2, [pc, #348]	; (80041f8 <UART_SetConfig+0x2dc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d120      	bne.n	80040e2 <UART_SetConfig+0x1c6>
 80040a0:	4b52      	ldr	r3, [pc, #328]	; (80041ec <UART_SetConfig+0x2d0>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040aa:	2bc0      	cmp	r3, #192	; 0xc0
 80040ac:	d013      	beq.n	80040d6 <UART_SetConfig+0x1ba>
 80040ae:	2bc0      	cmp	r3, #192	; 0xc0
 80040b0:	d814      	bhi.n	80040dc <UART_SetConfig+0x1c0>
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d009      	beq.n	80040ca <UART_SetConfig+0x1ae>
 80040b6:	2b80      	cmp	r3, #128	; 0x80
 80040b8:	d810      	bhi.n	80040dc <UART_SetConfig+0x1c0>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <UART_SetConfig+0x1a8>
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d006      	beq.n	80040d0 <UART_SetConfig+0x1b4>
 80040c2:	e00b      	b.n	80040dc <UART_SetConfig+0x1c0>
 80040c4:	2300      	movs	r3, #0
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e0cb      	b.n	8004262 <UART_SetConfig+0x346>
 80040ca:	2302      	movs	r3, #2
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e0c8      	b.n	8004262 <UART_SetConfig+0x346>
 80040d0:	2304      	movs	r3, #4
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e0c5      	b.n	8004262 <UART_SetConfig+0x346>
 80040d6:	2308      	movs	r3, #8
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e0c2      	b.n	8004262 <UART_SetConfig+0x346>
 80040dc:	2310      	movs	r3, #16
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e0bf      	b.n	8004262 <UART_SetConfig+0x346>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a45      	ldr	r2, [pc, #276]	; (80041fc <UART_SetConfig+0x2e0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d125      	bne.n	8004138 <UART_SetConfig+0x21c>
 80040ec:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <UART_SetConfig+0x2d0>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040fa:	d017      	beq.n	800412c <UART_SetConfig+0x210>
 80040fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004100:	d817      	bhi.n	8004132 <UART_SetConfig+0x216>
 8004102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004106:	d00b      	beq.n	8004120 <UART_SetConfig+0x204>
 8004108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800410c:	d811      	bhi.n	8004132 <UART_SetConfig+0x216>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <UART_SetConfig+0x1fe>
 8004112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004116:	d006      	beq.n	8004126 <UART_SetConfig+0x20a>
 8004118:	e00b      	b.n	8004132 <UART_SetConfig+0x216>
 800411a:	2300      	movs	r3, #0
 800411c:	77fb      	strb	r3, [r7, #31]
 800411e:	e0a0      	b.n	8004262 <UART_SetConfig+0x346>
 8004120:	2302      	movs	r3, #2
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e09d      	b.n	8004262 <UART_SetConfig+0x346>
 8004126:	2304      	movs	r3, #4
 8004128:	77fb      	strb	r3, [r7, #31]
 800412a:	e09a      	b.n	8004262 <UART_SetConfig+0x346>
 800412c:	2308      	movs	r3, #8
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e097      	b.n	8004262 <UART_SetConfig+0x346>
 8004132:	2310      	movs	r3, #16
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e094      	b.n	8004262 <UART_SetConfig+0x346>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a30      	ldr	r2, [pc, #192]	; (8004200 <UART_SetConfig+0x2e4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d125      	bne.n	800418e <UART_SetConfig+0x272>
 8004142:	4b2a      	ldr	r3, [pc, #168]	; (80041ec <UART_SetConfig+0x2d0>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800414c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004150:	d017      	beq.n	8004182 <UART_SetConfig+0x266>
 8004152:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004156:	d817      	bhi.n	8004188 <UART_SetConfig+0x26c>
 8004158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415c:	d00b      	beq.n	8004176 <UART_SetConfig+0x25a>
 800415e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004162:	d811      	bhi.n	8004188 <UART_SetConfig+0x26c>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <UART_SetConfig+0x254>
 8004168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416c:	d006      	beq.n	800417c <UART_SetConfig+0x260>
 800416e:	e00b      	b.n	8004188 <UART_SetConfig+0x26c>
 8004170:	2301      	movs	r3, #1
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	e075      	b.n	8004262 <UART_SetConfig+0x346>
 8004176:	2302      	movs	r3, #2
 8004178:	77fb      	strb	r3, [r7, #31]
 800417a:	e072      	b.n	8004262 <UART_SetConfig+0x346>
 800417c:	2304      	movs	r3, #4
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e06f      	b.n	8004262 <UART_SetConfig+0x346>
 8004182:	2308      	movs	r3, #8
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e06c      	b.n	8004262 <UART_SetConfig+0x346>
 8004188:	2310      	movs	r3, #16
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e069      	b.n	8004262 <UART_SetConfig+0x346>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <UART_SetConfig+0x2e8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d137      	bne.n	8004208 <UART_SetConfig+0x2ec>
 8004198:	4b14      	ldr	r3, [pc, #80]	; (80041ec <UART_SetConfig+0x2d0>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041a6:	d017      	beq.n	80041d8 <UART_SetConfig+0x2bc>
 80041a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ac:	d817      	bhi.n	80041de <UART_SetConfig+0x2c2>
 80041ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b2:	d00b      	beq.n	80041cc <UART_SetConfig+0x2b0>
 80041b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b8:	d811      	bhi.n	80041de <UART_SetConfig+0x2c2>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <UART_SetConfig+0x2aa>
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c2:	d006      	beq.n	80041d2 <UART_SetConfig+0x2b6>
 80041c4:	e00b      	b.n	80041de <UART_SetConfig+0x2c2>
 80041c6:	2300      	movs	r3, #0
 80041c8:	77fb      	strb	r3, [r7, #31]
 80041ca:	e04a      	b.n	8004262 <UART_SetConfig+0x346>
 80041cc:	2302      	movs	r3, #2
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e047      	b.n	8004262 <UART_SetConfig+0x346>
 80041d2:	2304      	movs	r3, #4
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e044      	b.n	8004262 <UART_SetConfig+0x346>
 80041d8:	2308      	movs	r3, #8
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e041      	b.n	8004262 <UART_SetConfig+0x346>
 80041de:	2310      	movs	r3, #16
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e03e      	b.n	8004262 <UART_SetConfig+0x346>
 80041e4:	efff69f3 	.word	0xefff69f3
 80041e8:	40011000 	.word	0x40011000
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40004400 	.word	0x40004400
 80041f4:	40004800 	.word	0x40004800
 80041f8:	40004c00 	.word	0x40004c00
 80041fc:	40005000 	.word	0x40005000
 8004200:	40011400 	.word	0x40011400
 8004204:	40007800 	.word	0x40007800
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a71      	ldr	r2, [pc, #452]	; (80043d4 <UART_SetConfig+0x4b8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d125      	bne.n	800425e <UART_SetConfig+0x342>
 8004212:	4b71      	ldr	r3, [pc, #452]	; (80043d8 <UART_SetConfig+0x4bc>)
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004218:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800421c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004220:	d017      	beq.n	8004252 <UART_SetConfig+0x336>
 8004222:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004226:	d817      	bhi.n	8004258 <UART_SetConfig+0x33c>
 8004228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422c:	d00b      	beq.n	8004246 <UART_SetConfig+0x32a>
 800422e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004232:	d811      	bhi.n	8004258 <UART_SetConfig+0x33c>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <UART_SetConfig+0x324>
 8004238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423c:	d006      	beq.n	800424c <UART_SetConfig+0x330>
 800423e:	e00b      	b.n	8004258 <UART_SetConfig+0x33c>
 8004240:	2300      	movs	r3, #0
 8004242:	77fb      	strb	r3, [r7, #31]
 8004244:	e00d      	b.n	8004262 <UART_SetConfig+0x346>
 8004246:	2302      	movs	r3, #2
 8004248:	77fb      	strb	r3, [r7, #31]
 800424a:	e00a      	b.n	8004262 <UART_SetConfig+0x346>
 800424c:	2304      	movs	r3, #4
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e007      	b.n	8004262 <UART_SetConfig+0x346>
 8004252:	2308      	movs	r3, #8
 8004254:	77fb      	strb	r3, [r7, #31]
 8004256:	e004      	b.n	8004262 <UART_SetConfig+0x346>
 8004258:	2310      	movs	r3, #16
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e001      	b.n	8004262 <UART_SetConfig+0x346>
 800425e:	2310      	movs	r3, #16
 8004260:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426a:	d15a      	bne.n	8004322 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800426c:	7ffb      	ldrb	r3, [r7, #31]
 800426e:	2b08      	cmp	r3, #8
 8004270:	d827      	bhi.n	80042c2 <UART_SetConfig+0x3a6>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <UART_SetConfig+0x35c>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	0800429d 	.word	0x0800429d
 800427c:	080042a5 	.word	0x080042a5
 8004280:	080042ad 	.word	0x080042ad
 8004284:	080042c3 	.word	0x080042c3
 8004288:	080042b3 	.word	0x080042b3
 800428c:	080042c3 	.word	0x080042c3
 8004290:	080042c3 	.word	0x080042c3
 8004294:	080042c3 	.word	0x080042c3
 8004298:	080042bb 	.word	0x080042bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800429c:	f7fe fdf4 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 80042a0:	61b8      	str	r0, [r7, #24]
        break;
 80042a2:	e013      	b.n	80042cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a4:	f7fe fe04 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
 80042a8:	61b8      	str	r0, [r7, #24]
        break;
 80042aa:	e00f      	b.n	80042cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042ac:	4b4b      	ldr	r3, [pc, #300]	; (80043dc <UART_SetConfig+0x4c0>)
 80042ae:	61bb      	str	r3, [r7, #24]
        break;
 80042b0:	e00c      	b.n	80042cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042b2:	f7fe fcfb 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 80042b6:	61b8      	str	r0, [r7, #24]
        break;
 80042b8:	e008      	b.n	80042cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042be:	61bb      	str	r3, [r7, #24]
        break;
 80042c0:	e004      	b.n	80042cc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	77bb      	strb	r3, [r7, #30]
        break;
 80042ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d074      	beq.n	80043bc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	005a      	lsls	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	085b      	lsrs	r3, r3, #1
 80042dc:	441a      	add	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b0f      	cmp	r3, #15
 80042ec:	d916      	bls.n	800431c <UART_SetConfig+0x400>
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f4:	d212      	bcs.n	800431c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	f023 030f 	bic.w	r3, r3, #15
 80042fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	b29b      	uxth	r3, r3
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	b29a      	uxth	r2, r3
 800430c:	89fb      	ldrh	r3, [r7, #14]
 800430e:	4313      	orrs	r3, r2
 8004310:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	89fa      	ldrh	r2, [r7, #14]
 8004318:	60da      	str	r2, [r3, #12]
 800431a:	e04f      	b.n	80043bc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	77bb      	strb	r3, [r7, #30]
 8004320:	e04c      	b.n	80043bc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004322:	7ffb      	ldrb	r3, [r7, #31]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d828      	bhi.n	800437a <UART_SetConfig+0x45e>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <UART_SetConfig+0x414>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004355 	.word	0x08004355
 8004334:	0800435d 	.word	0x0800435d
 8004338:	08004365 	.word	0x08004365
 800433c:	0800437b 	.word	0x0800437b
 8004340:	0800436b 	.word	0x0800436b
 8004344:	0800437b 	.word	0x0800437b
 8004348:	0800437b 	.word	0x0800437b
 800434c:	0800437b 	.word	0x0800437b
 8004350:	08004373 	.word	0x08004373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004354:	f7fe fd98 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 8004358:	61b8      	str	r0, [r7, #24]
        break;
 800435a:	e013      	b.n	8004384 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800435c:	f7fe fda8 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
 8004360:	61b8      	str	r0, [r7, #24]
        break;
 8004362:	e00f      	b.n	8004384 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <UART_SetConfig+0x4c0>)
 8004366:	61bb      	str	r3, [r7, #24]
        break;
 8004368:	e00c      	b.n	8004384 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436a:	f7fe fc9f 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 800436e:	61b8      	str	r0, [r7, #24]
        break;
 8004370:	e008      	b.n	8004384 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004376:	61bb      	str	r3, [r7, #24]
        break;
 8004378:	e004      	b.n	8004384 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	77bb      	strb	r3, [r7, #30]
        break;
 8004382:	bf00      	nop
    }

    if (pclk != 0U)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d018      	beq.n	80043bc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	085a      	lsrs	r2, r3, #1
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	441a      	add	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b0f      	cmp	r3, #15
 80043a2:	d909      	bls.n	80043b8 <UART_SetConfig+0x49c>
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043aa:	d205      	bcs.n	80043b8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	e001      	b.n	80043bc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40007c00 	.word	0x40007c00
 80043d8:	40023800 	.word	0x40023800
 80043dc:	00f42400 	.word	0x00f42400

080043e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01a      	beq.n	80044f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044de:	d10a      	bne.n	80044f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
  }
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af02      	add	r7, sp, #8
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004534:	f7fc fd68 	bl	8001008 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b08      	cmp	r3, #8
 8004546:	d10e      	bne.n	8004566 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f82d 	bl	80045b6 <UART_WaitOnFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e023      	b.n	80045ae <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b04      	cmp	r3, #4
 8004572:	d10e      	bne.n	8004592 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f817 	bl	80045b6 <UART_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e00d      	b.n	80045ae <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b09c      	sub	sp, #112	; 0x70
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	4613      	mov	r3, r2
 80045c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c6:	e0a5      	b.n	8004714 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	f000 80a1 	beq.w	8004714 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d2:	f7fc fd19 	bl	8001008 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045de:	429a      	cmp	r2, r3
 80045e0:	d302      	bcc.n	80045e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80045e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d13e      	bne.n	8004666 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045fc:	667b      	str	r3, [r7, #100]	; 0x64
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004608:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800460c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e6      	bne.n	80045e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	663b      	str	r3, [r7, #96]	; 0x60
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3308      	adds	r3, #8
 8004638:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800463a:	64ba      	str	r2, [r7, #72]	; 0x48
 800463c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e5      	bne.n	800461a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e067      	b.n	8004736 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d04f      	beq.n	8004714 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004682:	d147      	bne.n	8004714 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800468c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
 80046ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046b4:	e841 2300 	strex	r3, r2, [r1]
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e6      	bne.n	800468e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3308      	adds	r3, #8
 80046c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	613b      	str	r3, [r7, #16]
   return(result);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046e0:	623a      	str	r2, [r7, #32]
 80046e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	69f9      	ldr	r1, [r7, #28]
 80046e6:	6a3a      	ldr	r2, [r7, #32]
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e5      	bne.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e010      	b.n	8004736 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4013      	ands	r3, r2
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	429a      	cmp	r2, r3
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	429a      	cmp	r2, r3
 8004730:	f43f af4a 	beq.w	80045c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3770      	adds	r7, #112	; 0x70
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b096      	sub	sp, #88	; 0x58
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	4613      	mov	r3, r2
 800474c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2222      	movs	r2, #34	; 0x22
 8004768:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	2b00      	cmp	r3, #0
 8004770:	d02b      	beq.n	80047ca <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	4a42      	ldr	r2, [pc, #264]	; (8004880 <UART_Start_Receive_DMA+0x140>)
 8004778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	4a41      	ldr	r2, [pc, #260]	; (8004884 <UART_Start_Receive_DMA+0x144>)
 8004780:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a40      	ldr	r2, [pc, #256]	; (8004888 <UART_Start_Receive_DMA+0x148>)
 8004788:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	2200      	movs	r2, #0
 8004790:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3324      	adds	r3, #36	; 0x24
 800479c:	4619      	mov	r1, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	461a      	mov	r2, r3
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	f7fd f81d 	bl	80017e4 <HAL_DMA_Start_IT>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00c      	beq.n	80047ca <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2210      	movs	r2, #16
 80047b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e055      	b.n	8004876 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d018      	beq.n	800480c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ee:	657b      	str	r3, [r7, #84]	; 0x54
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80047fa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e6      	bne.n	80047da <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3308      	adds	r3, #8
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	653b      	str	r3, [r7, #80]	; 0x50
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800482c:	637a      	str	r2, [r7, #52]	; 0x34
 800482e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	613b      	str	r3, [r7, #16]
   return(result);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3308      	adds	r3, #8
 800485e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004860:	623a      	str	r2, [r7, #32]
 8004862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	69f9      	ldr	r1, [r7, #28]
 8004866:	6a3a      	ldr	r2, [r7, #32]
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	61bb      	str	r3, [r7, #24]
   return(result);
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e5      	bne.n	8004840 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3758      	adds	r7, #88	; 0x58
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	08004a51 	.word	0x08004a51
 8004884:	08004b71 	.word	0x08004b71
 8004888:	08004ba9 	.word	0x08004ba9

0800488c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800488c:	b480      	push	{r7}
 800488e:	b089      	sub	sp, #36	; 0x24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6979      	ldr	r1, [r7, #20]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	613b      	str	r3, [r7, #16]
   return(result);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e6      	bne.n	8004894 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	679a      	str	r2, [r3, #120]	; 0x78
}
 80048cc:	bf00      	nop
 80048ce:	3724      	adds	r7, #36	; 0x24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d8:	b480      	push	{r7}
 80048da:	b095      	sub	sp, #84	; 0x54
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004900:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004904:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e6      	bne.n	80048e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	61fb      	str	r3, [r7, #28]
   return(result);
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	64bb      	str	r3, [r7, #72]	; 0x48
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004932:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004934:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494a:	2b01      	cmp	r3, #1
 800494c:	d118      	bne.n	8004980 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	60bb      	str	r3, [r7, #8]
   return(result);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	647b      	str	r3, [r7, #68]	; 0x44
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6979      	ldr	r1, [r7, #20]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	613b      	str	r3, [r7, #16]
   return(result);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e6      	bne.n	800494e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004992:	bf00      	nop
 8004994:	3754      	adds	r7, #84	; 0x54
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b090      	sub	sp, #64	; 0x40
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b4:	d037      	beq.n	8004a26 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80049b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3308      	adds	r3, #8
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	623b      	str	r3, [r7, #32]
   return(result);
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3308      	adds	r3, #8
 80049dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049de:	633a      	str	r2, [r7, #48]	; 0x30
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e5      	bne.n	80049be <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a06:	637b      	str	r3, [r7, #52]	; 0x34
 8004a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	69b9      	ldr	r1, [r7, #24]
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e6      	bne.n	80049f2 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a24:	e002      	b.n	8004a2c <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8004a26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a28:	f7ff fa3c 	bl	8003ea4 <HAL_UART_TxCpltCallback>
}
 8004a2c:	bf00      	nop
 8004a2e:	3740      	adds	r7, #64	; 0x40
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7ff fa38 	bl	8003eb8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b09c      	sub	sp, #112	; 0x70
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a66:	d070      	beq.n	8004b4a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e6      	bne.n	8004a70 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	667b      	str	r3, [r7, #100]	; 0x64
 8004aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3308      	adds	r3, #8
 8004ac0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ac2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ac4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e5      	bne.n	8004aa2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3308      	adds	r3, #8
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aec:	663b      	str	r3, [r7, #96]	; 0x60
 8004aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3308      	adds	r3, #8
 8004af4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004af6:	633a      	str	r2, [r7, #48]	; 0x30
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e5      	bne.n	8004ad6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d118      	bne.n	8004b4a <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f023 0310 	bic.w	r3, r3, #16
 8004b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	69b9      	ldr	r1, [r7, #24]
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	617b      	str	r3, [r7, #20]
   return(result);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e6      	bne.n	8004b18 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b5c:	f7fb fe42 	bl	80007e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b60:	e002      	b.n	8004b68 <UART_DMAReceiveCplt+0x118>
    HAL_UART_RxCpltCallback(huart);
 8004b62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b64:	f7ff f9b2 	bl	8003ecc <HAL_UART_RxCpltCallback>
}
 8004b68:	bf00      	nop
 8004b6a:	3770      	adds	r7, #112	; 0x70
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d109      	bne.n	8004b9a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	4619      	mov	r1, r3
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7fb fe26 	bl	80007e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b98:	e002      	b.n	8004ba0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7ff f9a0 	bl	8003ee0 <HAL_UART_RxHalfCpltCallback>
}
 8004ba0:	bf00      	nop
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bcc:	2b80      	cmp	r3, #128	; 0x80
 8004bce:	d109      	bne.n	8004be4 <UART_DMAError+0x3c>
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b21      	cmp	r3, #33	; 0x21
 8004bd4:	d106      	bne.n	8004be4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004bde:	6978      	ldr	r0, [r7, #20]
 8004be0:	f7ff fe54 	bl	800488c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b40      	cmp	r3, #64	; 0x40
 8004bf0:	d109      	bne.n	8004c06 <UART_DMAError+0x5e>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b22      	cmp	r3, #34	; 0x22
 8004bf6:	d106      	bne.n	8004c06 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004c00:	6978      	ldr	r0, [r7, #20]
 8004c02:	f7ff fe69 	bl	80048d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c0c:	f043 0210 	orr.w	r2, r3, #16
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c16:	6978      	ldr	r0, [r7, #20]
 8004c18:	f7ff f96c 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c1c:	bf00      	nop
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff f956 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	61bb      	str	r3, [r7, #24]
 8004c78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6979      	ldr	r1, [r7, #20]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	613b      	str	r3, [r7, #16]
   return(result);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e6      	bne.n	8004c58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff f904 	bl	8003ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c9c:	bf00      	nop
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08c      	sub	sp, #48	; 0x30
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d14a      	bne.n	8004d50 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e043      	b.n	8004d52 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e03c      	b.n	8004d52 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff fd27 	bl	8004740 <UART_Start_Receive_DMA>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004cf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d124      	bne.n	8004d4a <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d11d      	bne.n	8004d44 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2210      	movs	r2, #16
 8004d0e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	e853 3f00 	ldrex	r3, [r3]
 8004d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f043 0310 	orr.w	r3, r3, #16
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d30:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	6a39      	ldr	r1, [r7, #32]
 8004d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e6      	bne.n	8004d10 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8004d42:	e002      	b.n	8004d4a <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d4e:	e000      	b.n	8004d52 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8004d50:	2302      	movs	r3, #2
  }
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3730      	adds	r7, #48	; 0x30
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	f107 001c 	add.w	r0, r7, #28
 8004d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d120      	bne.n	8004db6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	4b20      	ldr	r3, [pc, #128]	; (8004e08 <USB_CoreInit+0xac>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d105      	bne.n	8004daa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fa92 	bl	80052d4 <USB_CoreReset>
 8004db0:	4603      	mov	r3, r0
 8004db2:	73fb      	strb	r3, [r7, #15]
 8004db4:	e010      	b.n	8004dd8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fa86 	bl	80052d4 <USB_CoreReset>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d10b      	bne.n	8004df6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f043 0206 	orr.w	r2, r3, #6
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e02:	b004      	add	sp, #16
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	ffbdffbf 	.word	0xffbdffbf

08004e0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f023 0201 	bic.w	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d115      	bne.n	8004e7c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	f7fc f8df 	bl	8001020 <HAL_Delay>
      ms++;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3301      	adds	r3, #1
 8004e66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fa25 	bl	80052b8 <USB_GetMode>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d01e      	beq.n	8004eb2 <USB_SetCurrentMode+0x84>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b31      	cmp	r3, #49	; 0x31
 8004e78:	d9f0      	bls.n	8004e5c <USB_SetCurrentMode+0x2e>
 8004e7a:	e01a      	b.n	8004eb2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d115      	bne.n	8004eae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e8e:	2001      	movs	r0, #1
 8004e90:	f7fc f8c6 	bl	8001020 <HAL_Delay>
      ms++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3301      	adds	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa0c 	bl	80052b8 <USB_GetMode>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <USB_SetCurrentMode+0x84>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b31      	cmp	r3, #49	; 0x31
 8004eaa:	d9f0      	bls.n	8004e8e <USB_SetCurrentMode+0x60>
 8004eac:	e001      	b.n	8004eb2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e005      	b.n	8004ebe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b32      	cmp	r3, #50	; 0x32
 8004eb6:	d101      	bne.n	8004ebc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ec8:	b084      	sub	sp, #16
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b086      	sub	sp, #24
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	e009      	b.n	8004efc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	3340      	adds	r3, #64	; 0x40
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b0e      	cmp	r3, #14
 8004f00:	d9f2      	bls.n	8004ee8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d11c      	bne.n	8004f42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f16:	f043 0302 	orr.w	r3, r3, #2
 8004f1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	e005      	b.n	8004f4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f54:	461a      	mov	r2, r3
 8004f56:	2300      	movs	r3, #0
 8004f58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f60:	4619      	mov	r1, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f68:	461a      	mov	r2, r3
 8004f6a:	680b      	ldr	r3, [r1, #0]
 8004f6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d10c      	bne.n	8004f8e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d104      	bne.n	8004f84 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f961 	bl	8005244 <USB_SetDevSpeed>
 8004f82:	e008      	b.n	8004f96 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f84:	2101      	movs	r1, #1
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f95c 	bl	8005244 <USB_SetDevSpeed>
 8004f8c:	e003      	b.n	8004f96 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f8e:	2103      	movs	r1, #3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f957 	bl	8005244 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f96:	2110      	movs	r1, #16
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f8f3 	bl	8005184 <USB_FlushTxFifo>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f91d 	bl	80051e8 <USB_FlushRxFifo>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2300      	movs	r3, #0
 8004fce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	e043      	b.n	800506a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ff8:	d118      	bne.n	800502c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	461a      	mov	r2, r3
 800500e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	e013      	b.n	800503e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	461a      	mov	r2, r3
 8005024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e008      	b.n	800503e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005038:	461a      	mov	r2, r3
 800503a:	2300      	movs	r3, #0
 800503c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	461a      	mov	r2, r3
 800504c:	2300      	movs	r3, #0
 800504e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	461a      	mov	r2, r3
 800505e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005062:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	3301      	adds	r3, #1
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	429a      	cmp	r2, r3
 8005070:	d3b7      	bcc.n	8004fe2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	e043      	b.n	8005100 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800508a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800508e:	d118      	bne.n	80050c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a2:	461a      	mov	r2, r3
 80050a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e013      	b.n	80050d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	461a      	mov	r2, r3
 80050ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	e008      	b.n	80050d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ce:	461a      	mov	r2, r3
 80050d0:	2300      	movs	r3, #0
 80050d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	461a      	mov	r2, r3
 80050e2:	2300      	movs	r3, #0
 80050e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f2:	461a      	mov	r2, r3
 80050f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	3301      	adds	r3, #1
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	429a      	cmp	r2, r3
 8005106:	d3b7      	bcc.n	8005078 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800511a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005128:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	2b00      	cmp	r3, #0
 800512e:	d105      	bne.n	800513c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f043 0210 	orr.w	r2, r3, #16
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	4b0e      	ldr	r3, [pc, #56]	; (800517c <USB_DevInit+0x2b4>)
 8005142:	4313      	orrs	r3, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f043 0208 	orr.w	r2, r3, #8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800515a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d105      	bne.n	800516c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	4b06      	ldr	r3, [pc, #24]	; (8005180 <USB_DevInit+0x2b8>)
 8005166:	4313      	orrs	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800516c:	7dfb      	ldrb	r3, [r7, #23]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005178:	b004      	add	sp, #16
 800517a:	4770      	bx	lr
 800517c:	803c3800 	.word	0x803c3800
 8005180:	40000004 	.word	0x40000004

08005184 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3301      	adds	r3, #1
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	4a12      	ldr	r2, [pc, #72]	; (80051e4 <USB_FlushTxFifo+0x60>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d901      	bls.n	80051a2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e01a      	b.n	80051d8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	daf3      	bge.n	8005192 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	019b      	lsls	r3, r3, #6
 80051b2:	f043 0220 	orr.w	r2, r3, #32
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3301      	adds	r3, #1
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <USB_FlushTxFifo+0x60>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e006      	b.n	80051d8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	d0f1      	beq.n	80051ba <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	00030d40 	.word	0x00030d40

080051e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3301      	adds	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	4a11      	ldr	r2, [pc, #68]	; (8005240 <USB_FlushRxFifo+0x58>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d901      	bls.n	8005204 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e017      	b.n	8005234 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	daf3      	bge.n	80051f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2210      	movs	r2, #16
 8005214:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3301      	adds	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	4a08      	ldr	r2, [pc, #32]	; (8005240 <USB_FlushRxFifo+0x58>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e006      	b.n	8005234 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0310 	and.w	r3, r3, #16
 800522e:	2b10      	cmp	r3, #16
 8005230:	d0f1      	beq.n	8005216 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	00030d40 	.word	0x00030d40

08005244 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	68f9      	ldr	r1, [r7, #12]
 8005260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005264:	4313      	orrs	r3, r2
 8005266:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005276:	b480      	push	{r7}
 8005278:	b085      	sub	sp, #20
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005290:	f023 0303 	bic.w	r3, r3, #3
 8005294:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a4:	f043 0302 	orr.w	r3, r3, #2
 80052a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f003 0301 	and.w	r3, r3, #1
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	4a13      	ldr	r2, [pc, #76]	; (8005334 <USB_CoreReset+0x60>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e01a      	b.n	8005326 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	daf3      	bge.n	80052e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f043 0201 	orr.w	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <USB_CoreReset+0x60>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d901      	bls.n	8005318 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e006      	b.n	8005326 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b01      	cmp	r3, #1
 8005322:	d0f1      	beq.n	8005308 <USB_CoreReset+0x34>

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	00030d40 	.word	0x00030d40

08005338 <__libc_init_array>:
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	4d0d      	ldr	r5, [pc, #52]	; (8005370 <__libc_init_array+0x38>)
 800533c:	4c0d      	ldr	r4, [pc, #52]	; (8005374 <__libc_init_array+0x3c>)
 800533e:	1b64      	subs	r4, r4, r5
 8005340:	10a4      	asrs	r4, r4, #2
 8005342:	2600      	movs	r6, #0
 8005344:	42a6      	cmp	r6, r4
 8005346:	d109      	bne.n	800535c <__libc_init_array+0x24>
 8005348:	4d0b      	ldr	r5, [pc, #44]	; (8005378 <__libc_init_array+0x40>)
 800534a:	4c0c      	ldr	r4, [pc, #48]	; (800537c <__libc_init_array+0x44>)
 800534c:	f000 f820 	bl	8005390 <_init>
 8005350:	1b64      	subs	r4, r4, r5
 8005352:	10a4      	asrs	r4, r4, #2
 8005354:	2600      	movs	r6, #0
 8005356:	42a6      	cmp	r6, r4
 8005358:	d105      	bne.n	8005366 <__libc_init_array+0x2e>
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005360:	4798      	blx	r3
 8005362:	3601      	adds	r6, #1
 8005364:	e7ee      	b.n	8005344 <__libc_init_array+0xc>
 8005366:	f855 3b04 	ldr.w	r3, [r5], #4
 800536a:	4798      	blx	r3
 800536c:	3601      	adds	r6, #1
 800536e:	e7f2      	b.n	8005356 <__libc_init_array+0x1e>
 8005370:	080053d4 	.word	0x080053d4
 8005374:	080053d4 	.word	0x080053d4
 8005378:	080053d4 	.word	0x080053d4
 800537c:	080053d8 	.word	0x080053d8

08005380 <memset>:
 8005380:	4402      	add	r2, r0
 8005382:	4603      	mov	r3, r0
 8005384:	4293      	cmp	r3, r2
 8005386:	d100      	bne.n	800538a <memset+0xa>
 8005388:	4770      	bx	lr
 800538a:	f803 1b01 	strb.w	r1, [r3], #1
 800538e:	e7f9      	b.n	8005384 <memset+0x4>

08005390 <_init>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	bf00      	nop
 8005394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005396:	bc08      	pop	{r3}
 8005398:	469e      	mov	lr, r3
 800539a:	4770      	bx	lr

0800539c <_fini>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	bf00      	nop
 80053a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a2:	bc08      	pop	{r3}
 80053a4:	469e      	mov	lr, r3
 80053a6:	4770      	bx	lr
